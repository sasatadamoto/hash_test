#include <Windows.h>
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <io.h>
#include <time.h>
#include <math.h>
#include <string.h>
#include <direct.h>
#include <sys/stat.h>
#include <openssl\sha.h>
struct dun_info
{
	int w_direction[4];
	int lv_map;
	int room;
};
struct deta
{
	int num;
	char name[104];
	int n_lv;
	int attribute;
	int type;
	int kind;
	int n_mp;
	int ac_turn;
	int eve_proba;
	int acve;
};
struct deta2
{
	int num;
	char name[104];
	int attribute;
	int type;
	int kind[5];
	int n_mp;
	int ac_turn[5];
	int acve;
};
struct p_status
{
	int lv;
	int ne_exp;
	int no_exp;
	int no_mon;
	char name[110];
	int maxhp;
	int curhp;
	int atk;
	int def;
	int mana;
	int maxmp;
	int curmp;
	int espro;
	int attribute;
	int ab_resist[6];
	int w_at[6];
};
struct e_status
{
	int kind;
	int lv_area[3];
	char *name;
	int times;
	int maxhp;
	int curhp;
	int maxmp;
	int curmp;
	int atk;
	int def;
	int mana;
	int magic[22][2];
	int espro;
	int attribute;
	int w_at[6];
	int ab_resist[6];
	int get_ite[10];
};
struct m_status_buff
{
	int lv;
	char *name;
	int maxhp;
	int atk;
	int def;
	int mana;
	int espro;
	int avo_pro;
	int cr_pro;
	int attribute;
	int w_at[6];
	int geex;
	int gemo;
	int ab_resist[6];
};
struct e_status_buff
{
	int kind;
	int lv;
	char *name;
	int maxhp;
	int curhp;
	int atk;
	int def;
	int mana;
	int espro;
	int avo_pro;
	int cr_pro;
	int attribute;
	int w_at[6];
	int ab_resist[7];
};
struct subatt
{
	int last;
	int num;
};
struct item
{
	int num;
	char name[109];
	int type;
	int attribute;
	int turn[2];
	int kind[2];
	int buy_price;
	int enc_prob;
};
typedef struct
{
	int lv_limit;
	int lv;
	char name[110];
	char yourname[105];
	int curhp;
	int maxhp;
	int curmp;
	int maxmp;
	int atk;
	int n_atk;
	int def;
	int mana;
	int espro;
	int avo_pro;
	int cr_pro;
	int ne_exp;
	int no_exp;
	int no_mon;
	double tru_no_exp;
	int m_abnom_f[5][2];
	int m_abnom[6];
	int ab_d;
	int ab_resist[6];
	int w_at[6];
	int m_ski_num;
	int m_abre_f[2][2];
	int equip[5];
	int wea_dam_cou[2];
	int wea_dam[4][2];
	int have_item[283][2];
	int in_dungeon;
	int buy_his[500];
	int buy_lim[500];
	int buy_lv[500];
	int location[3];
	int not_move;
	int befo_room;
	int befo_warp;
	int en;
	int sp_count;
	int sp_comma;
	int sp_eq_get;
	int alive_boss[3];
	int knowloca;
	int lv_shop;
	int dk_turn;
	int dk;
	int dk_per;
	int absorb[4];
	int viol;
	unsigned char has_d[SHA256_DIGEST_LENGTH];
} A_STATUS;
#define OPEN_R(filenum, fp)                                                                \
	do                                                                                     \
	{                                                                                      \
		sprintf_s(file_number, sizeof(file_number), "savefiles\\savedata%d.bin", filenum); \
		fp = fopen(file_number, "rb");                                                     \
	} while (0)
#define OPEN_W(filenum, fp)                                                                \
	do                                                                                     \
	{                                                                                      \
		mkdir("savefiles");                                                                \
		sprintf_s(file_number, sizeof(file_number), "savefiles\\savedata%d.bin", filenum); \
		fp = fopen(file_number, "wb");                                                     \
	} while (0)
#define INT_PRINT(a) printf(#a ":%d ", a);
#define DOU_PRINT(a) printf(#a ":%0.lf ", a);
#define CHA_PRINT(a) printf(#a ":%s ", a);
#define INT_SHA_UP(num)                                            \
	do                                                             \
	{                                                              \
		memset(buf, '\0', sizeof(buf));                            \
		snprintf(buf, sizeof(buf), "%d", num);                     \
		SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf)); \
	} while (0)
#define DOU_SHA_UP(dec)                                            \
	do                                                             \
	{                                                              \
		memset(buf, '\0', sizeof(buf));                            \
		snprintf(buf, sizeof(buf), "%.lf", dec);                   \
		SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf)); \
	} while (0)
#define CHA_SHA_UP(chr)                                            \
	do                                                             \
	{                                                              \
		memset(buf, '\0', sizeof(buf));                            \
		memmove(buf, chr, strlen(chr));                            \
		SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf)); \
	} while (0)
#define SH_PRI(SH)                                    \
	do                                                \
	{                                                 \
		for (int a = 0; a < 8; a++)                   \
		{                                             \
			printf("h[%d]:%d ", a, SH.h[a]);          \
		}                                             \
		printf("SH.Nl:%d ", SH.Nl);                   \
		printf("SH.Nh:%d ", SH.Nh);                   \
		for (int b = 0; b < 16; b++)                  \
		{                                             \
			printf("SH.data[%d]:%d ", b, SH.data[b]); \
		}                                             \
		printf("SH.num:%d ", SH.num);                 \
		printf("SH.md_len:%d\n", SH.md_len);          \
	} while (0)
#define SH_UP(a, i)    \
	do                 \
	{                  \
		a[i] = ctx256; \
		if (i < 49)    \
		{              \
			i += 1;    \
		}              \
	} while (0)
#define SH_COP(a, b
	do
	{
		for (int comp = 0; comp < 50; comp
		{
			if (a[comp].h[0] == b[comp].h[0] && a[comp].h[1] == b[comp].h[1] && a[comp].h[2] == b[comp].h[2] && a[comp].h[3] == b[comp].h[3] && a[comp].h[4] == b[comp].h[4] && a[comp].h[5] == b[comp].h[5] && a[comp].h[6] == b[comp].h[6] && a[comp].h[7] == b[comp].h[7] && a[comp].Nl == b[comp].Nl && a[comp].Nh == b[comp].Nh && a[comp].data[0] == b[comp].data[0] && a[comp].data[1] == b[comp].data[1] && a[comp].data[2] == b[comp].data[2] && a[comp].data[3] == b[comp].data[3] && a[comp].data[4] == b[comp].data[4] && a[comp].data[5] == b[comp].data[5] && a[comp].data[6] == b[comp].data[6] && a[comp].data[7] == b[comp].data[7] && a[comp].data[8] == b[comp].data[8] && a[comp].data[9] == b[comp].data[9] && a[comp].data[10] == b[comp].data[10] && a[comp].data[11] == b[comp].data[11] && a[comp].data[12] == b[comp].data[12] && a[comp].data[13] == b[comp].data[13] && a[comp].data[14] == b[comp].data[14] && a[comp].data[15] == b[comp].data[15]) \
			{
				printf("save[%d]==load[%d]\n", comp, comp
			}
			else                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \
			{
				printf("save[%d]==load[%d]\n", comp, comp
			}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \
		}
	} while (0)
static char file_number[27];
static A_STATUS save_d[100] = {{0}};
static struct dun_info dungeon[42][40] = {{{{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 1, 0}, {{1, 0, 1, 0}, 1, 0}, {{1, 1, 1, 1}, 1, 0}, {{0, 1, 1, 0}, 1, 0}, {{0, 0, 1, 0}, 1, 0}, {{0, 0, 1, 0}, 1, 0}, {{0, 0, 1, 1}, 1, 0}, {{1, 0, 1, 0}, 1, 0}, {{0, 1, 1, 0}, 3, 0}, {{0, 0, 1, 0}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{0, 1, 1, 0}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{0, 1, 1, 0}, 18, 1}, {{0, 0, 1, 0}, 18, 1}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 1, 0}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{0, 0, 1, 0}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 1, 1}, 16, 0}, {{1, 1, 1, 0}, 0, 0}}, {{{1, 1, 0, 0}, 1, 0}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 0, 1}, 1, 0}, {{0, 0, 1, 1}, 1, 0}, {{0, 0, 0, 0}, 1, 0}, {{0, 0, 0, 0}, 1, 0}, {{1, 0, 0, 1}, 1, 0}, {{1, 1, 1, 0}, 2, 1}, {{0, 1, 0, 1}, 3, 0}, {{0, 0, 0, 1}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{1, 0, 0, 0}, 3, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{0, 1, 0, 1}, 14, 0}, {{1, 0, 0, 1}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 0, 1}, 18, 1}, {{0, 0, 0, 1}, 18, 1}, {{1, 0, 0, 1}, 18, 1}, {{1, 1, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 1, 0}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{1, 0, 1, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{0, 1, 0, 1}, 1, 0}, {{1, 0, 0, 0}, 1, 0}, {{0, 1, 1, 1}, 1, 0}, {{0, 0, 1, 1}, 1, 0}, {{1, 0, 0, 0}, 1, 0}, {{1, 1, 0, 0}, 1, 0}, {{0, 1, 1, 0}, 2, 1}, {{0, 0, 0, 0}, 2, 1}, {{1, 0, 1, 0}, 2, 1}, {{1, 1, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 0}, 6, 1}, {{0, 0, 1, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{1, 0, 1, 0}, 6, 1}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{0, 1, 0, 1}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{0, 1, 1, 0}, 14, 0}, {{0, 0, 0, 1}, 14, 0}, {{1, 0, 0, 1}, 14, 0}, {{0, 1, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{1, 1, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{1, 1, 1, 1}, 1, 0}, {{0, 1, 0, 1}, 1, 0}, {{0, 0, 1, 1}, 1, 0}, {{1, 0, 1, 0}, 1, 0}, {{0, 1, 0, 0}, 1, 0}, {{0, 0, 0, 1}, 1, 0}, {{0, 0, 0, 0}, 2, 1}, {{0, 0, 0, 0}, 2, 1}, {{1, 0, 0, 0}, 2, 1}, {{1, 1, 0, 0}, 3, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{1, 0, 0, 0}, 6, 1}, {{0, 1, 0, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{0, 1, 0, 1}, 14, 0}, {{1, 0, 0, 1}, 14, 0}, {{0, 1, 1, 0}, 14, 0}, {{0, 0, 1, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 0, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 0}, 16, 0}, {{1, 0, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{0, 1, 1, 0}, 1, 0}, {{0, 0, 1, 1}, 1, 0}, {{1, 0, 1, 0}, 1, 0}, {{1, 1, 0, 0}, 1, 0}, {{1, 1, 0, 0}, 3, 0}, {{1, 1, 1, 0}, 3, 0}, {{0, 1, 0, 1}, 2, 1}, {{0, 0, 0, 1}, 2, 1}, {{1, 0, 0, 1}, 2, 1}, {{1, 1, 0, 0}, 3, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{0, 0, 0, 1}, 6, 1}, {{1, 0, 0, 1}, 6, 1}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 1, 1}, 13, 0}, {{0, 1, 0, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 13, 0}, {{0, 0, 1, 0}, 13, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 0, 1}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 1, 0}, 16, 0}, {{0, 1, 0, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{1, 1, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{1, 1, 0, 0}, 1, 0}, {{0, 1, 1, 0}, 1, 0}, {{1, 0, 0, 1}, 1, 0}, {{1, 1, 0, 0}, 1, 0}, {{0, 1, 0, 0}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 0, 0}, 6, 1}, {{0, 1, 1, 1}, 7, 0}, {{0, 0, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 13, 0}, {{0, 0, 1, 0}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 1, 0}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 1, 0}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{1, 1, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{1, 1, 0, 0}, 1, 0}, {{0, 1, 0, 1}, 1, 0}, {{0, 0, 1, 0}, 1, 0}, {{1, 0, 0, 0}, 1, 0}, {{1, 1, 0, 0}, 3, 0}, {{1, 1, 0, 1}, 3, 0}, {{0, 1, 1, 0}, 4, 1}, {{0, 0, 1, 0}, 4, 1}, {{1, 0, 1, 0}, 4, 1}, {{1, 1, 0, 1}, 3, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 1}, 6, 1}, {{0, 0, 0, 1}, 6, 1}, {{1, 0, 1, 0}, 5, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 1, 1}, 0, 0}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 0, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{1, 1, 0, 0}, 15, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 0}, 16, 0}, {{1, 0, 0, 1}, 16, 0}}, {{{0, 1, 0, 1}, 1, 0}, {{1, 0, 1, 0}, 1, 0}, {{0, 1, 0, 1}, 3, 0}, {{0, 0, 0, 1}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{0, 0, 0, 0}, 4, 1}, {{0, 0, 0, 0}, 4, 1}, {{1, 0, 0, 0}, 4, 1}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 3, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 12, 1}, {{0, 0, 1, 0}, 12, 1}, {{1, 0, 1, 0}, 12, 1}, {{0, 1, 1, 0}, 13, 0}, {{0, 0, 1, 0}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{0, 1, 0, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 0, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 0}, 16, 0}, {{1, 0, 1, 0}, 16, 0}}, {{{0, 1, 1, 0}, 2, 1}, {{0, 0, 0, 0}, 2, 1}, {{0, 0, 1, 0}, 2, 1}, {{1, 0, 1, 0}, 2, 1}, {{0, 1, 0, 0}, 3, 0}, {{1, 0, 1, 1}, 3, 0}, {{0, 1, 0, 1}, 4, 1}, {{0, 0, 0, 1}, 4, 1}, {{1, 0, 0, 1}, 4, 1}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 0, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 0}, 12, 1}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 12, 1}, {{0, 0, 0, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{0, 1, 0, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{0, 1, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 1, 0}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{0, 1, 0, 0}, 16, 0}, {{1, 0, 0, 0}, 16, 0}}, {{{0, 1, 0, 0}, 2, 1}, {{0, 0, 0, 0}, 2, 1}, {{0, 0, 0, 0}, 2, 1}, {{1, 0, 0, 0}, 2, 1}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 1, 0}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 0, 1}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 0}, 12, 1}, {{0, 0, 0, 0}, 12, 1}, {{1, 0, 0, 0}, 12, 1}, {{0, 1, 1, 0}, 11, 0}, {{0, 0, 1, 0}, 11, 0}, {{0, 0, 1, 0}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 1, 0}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 0, 1}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{0, 0, 0, 0}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{1, 1, 0, 0}, 14, 0}, {{0, 1, 0, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{0, 1, 1, 1}, 16, 0}, {{0, 0, 0, 1}, 16, 0}, {{1, 0, 0, 0}, 16, 0}}, {{{0, 1, 0, 1}, 2, 1}, {{0, 0, 0, 1}, 2, 1}, {{0, 0, 0, 1}, 2, 1}, {{1, 0, 0, 1}, 2, 1}, {{0, 1, 0, 1}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 0, 0}, 5, 0}, {{0, 0, 0, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 12, 1}, {{0, 0, 0, 0}, 12, 1}, {{1, 0, 0, 1}, 12, 1}, {{0, 1, 0, 1}, 11, 0}, {{0, 0, 0, 1}, 11, 0}, {{1, 0, 0, 0}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 0, 1}, 14, 0}, {{0, 0, 0, 1}, 14, 0}, {{1, 0, 0, 1}, 14, 0}, {{0, 1, 0, 1}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{1, 0, 1, 0}, 14, 0}, {{0, 1, 1, 0}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{0, 1, 1, 0}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 1, 0}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 1}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{0, 1, 1, 1}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 1}, 11, 0}, {{0, 0, 0, 0}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 1, 1}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 1, 0}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 1, 1}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{1, 0, 0, 0}, 14, 0}, {{0, 1, 0, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{1, 1, 0, 0}, 15, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{1, 1, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 1}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 0, 0}, 3, 0}, {{1, 0, 0, 1}, 3, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 1, 0}, 9, 0}, {{0, 1, 1, 0}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 1, 0}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 1, 0}, 11, 0}, {{0, 0, 1, 0}, 11, 0}, {{1, 0, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 1, 1}, 14, 0}, {{0, 0, 1, 1}, 14, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 1, 1}, 14, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{1, 1, 0, 0}, 16, 0}}, {{{0, 1, 1, 1}, 0, 0}, {{0, 0, 0, 1}, 3, 0}, {{0, 0, 1, 1}, 3, 0}, {{1, 0, 0, 1}, 3, 0}, {{1, 1, 0, 0}, 3, 0}, {{1, 1, 1, 0}, 3, 0}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{1, 1, 0, 0}, 5, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{0, 0, 0, 1}, 11, 0}, {{0, 0, 0, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 0, 0}, 0, 0}, {{0, 1, 1, 0}, 12, 0}, {{1, 0, 1, 0}, 12, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 0}, 16, 0}, {{0, 0, 1, 0}, 16, 0}, {{0, 0, 1, 0}, 16, 0}, {{1, 0, 0, 0}, 16, 0}}, {{{0, 1, 1, 0}, 3, 0}, {{0, 0, 1, 0}, 3, 0}, {{0, 0, 1, 0}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 0, 0}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{0, 0, 0, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 1, 1}, 0, 0}, {{0, 1, 1, 0}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 1, 0}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{0, 1, 1, 1}, 18, 1}, {{0, 0, 1, 1}, 18, 1}, {{0, 0, 1, 1}, 18, 1}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 1, 0}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 0, 1}, 12, 0}, {{1, 0, 0, 1}, 12, 0}, {{0, 1, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{1, 0, 0, 0}, 16, 0}}, {{{0, 1, 0, 1}, 3, 0}, {{0, 0, 0, 1}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{1, 0, 0, 0}, 3, 0}, {{0, 1, 0, 0}, 3, 0}, {{0, 0, 0, 0}, 3, 0}, {{1, 0, 1, 1}, 3, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{0, 1, 0, 1}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{1, 1, 0, 1}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 1}, 9, 0}, {{1, 0, 0, 0}, 9, 0}, {{0, 1, 1, 0}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{1, 0, 1, 0}, 10, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 0}, 12, 0}, {{0, 1, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{0, 0, 0, 0}, 16, 0}, {{1, 0, 0, 0}, 16, 0}}, {{{0, 1, 1, 0}, 6, 1}, {{0, 0, 1, 0}, 6, 1}, {{1, 0, 0, 0}, 6, 1}, {{0, 1, 0, 1}, 3, 0}, {{0, 0, 0, 1}, 3, 0}, {{1, 0, 0, 1}, 3, 0}, {{0, 1, 1, 0}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{0, 0, 1, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 1, 0}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 0}, 9, 0}, {{1, 0, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 10, 0}, {{1, 0, 1, 0}, 10, 0}, {{0, 1, 0, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{1, 0, 0, 0}, 10, 0}, {{0, 1, 1, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{1, 0, 1, 0}, 13, 1}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 0, 1}, 12, 0}, {{0, 1, 0, 1}, 16, 0}, {{0, 0, 0, 1}, 16, 0}, {{0, 0, 0, 1}, 16, 0}, {{0, 0, 0, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}}, {{{0, 1, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{0, 0, 1, 1}, 3, 0}, {{1, 0, 1, 0}, 3, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{1, 1, 1, 1}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 0, 0}, 9, 0}, {{0, 0, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 0, 1}, 9, 0}, {{1, 0, 0, 0}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 10, 0}, {{1, 1, 0, 0}, 10, 0}, {{0, 1, 1, 0}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{1, 0, 0, 0}, 10, 0}, {{0, 1, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}}, {{{0, 1, 0, 1}, 6, 1}, {{0, 0, 0, 1}, 6, 1}, {{1, 0, 0, 1}, 6, 1}, {{1, 1, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 3, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 1, 0}, 5, 0}, {{0, 1, 1, 0}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 0, 0}, 10, 0}, {{0, 1, 0, 1}, 10, 0}, {{1, 0, 0, 1}, 10, 0}, {{1, 1, 1, 0}, 10, 0}, {{1, 1, 0, 1}, 10, 0}, {{0, 1, 0, 1}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 1}, 13, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 1, 1}, 19, 0}, {{0, 0, 1, 1}, 19, 0}, {{1, 0, 1, 0}, 19, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 0, 0}, 0, 0}}, {{{0, 1, 1, 0}, 6, 1}, {{0, 0, 1, 0}, 6, 1}, {{0, 0, 1, 0}, 6, 1}, {{0, 0, 1, 1}, 3, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 1, 0}, 7, 0}, {{0, 1, 0, 1}, 5, 0}, {{1, 0, 0, 1}, 5, 0}, {{1, 1, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 0}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{1, 0, 1, 0}, 10, 0}, {{0, 1, 0, 0}, 10, 0}, {{0, 0, 1, 0}, 10, 0}, {{1, 0, 1, 0}, 11, 0}, {{0, 1, 0, 0}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 1, 1}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}}, {{{0, 1, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{1, 0, 0, 0}, 6, 1}, {{1, 1, 1, 0}, 8, 1}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 7, 0}, {{1, 0, 1, 0}, 7, 0}, {{1, 1, 1, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{0, 1, 0, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 0, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 0, 1}, 9, 0}, {{0, 0, 0, 1}, 9, 0}, {{1, 0, 1, 1}, 9, 0}, {{0, 1, 1, 0}, 10, 0}, {{1, 0, 0, 1}, 10, 0}, {{0, 1, 0, 1}, 10, 0}, {{1, 0, 0, 0}, 10, 0}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 0, 1}, 11, 0}, {{1, 0, 1, 0}, 11, 0}, {{1, 1, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 1, 1}, 19, 0}, {{1, 0, 1, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{1, 0, 1, 0}, 19, 0}}, {{{0, 1, 0, 0}, 6, 1}, {{0, 0, 0, 0}, 6, 1}, {{1, 0, 0, 0}, 6, 1}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 1, 1}, 7, 0}, {{0, 0, 0, 0}, 7, 0}, {{0, 0, 0, 0}, 7, 0}, {{0, 0, 0, 0}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 1, 0}, 12, 0}, {{1, 1, 0, 1}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{0, 0, 1, 0}, 10, 0}, {{0, 0, 1, 0}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{0, 0, 0, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{0, 0, 1, 1}, 10, 0}, {{1, 0, 0, 1}, 10, 0}, {{0, 1, 0, 1}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{1, 1, 0, 1}, 11, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 0}, 19, 0}, {{1, 0, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 6, 1}, {{0, 0, 0, 1}, 6, 1}, {{1, 0, 0, 1}, 6, 1}, {{1, 1, 0, 0}, 8, 1}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{1, 0, 0, 1}, 7, 0}, {{0, 1, 1, 0}, 7, 0}, {{1, 0, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 0}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 0}, 12, 0}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 1, 0}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 0}, 12, 0}, {{0, 1, 1, 0}, 15, 0}, {{0, 0, 1, 0}, 15, 0}, {{0, 0, 1, 0}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{0, 1, 1, 0}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 1}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 0}, 19, 0}, {{0, 0, 1, 0}, 19, 0}, {{0, 0, 0, 0}, 19, 0}, {{1, 0, 0, 0}, 0, 0}}, {{{1, 1, 1, 0}, 0, 0}, {{0, 1, 1, 0}, 8, 1}, {{0, 0, 1, 0}, 8, 1}, {{0, 0, 0, 0}, 8, 1}, {{0, 0, 0, 0}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{0, 0, 0, 1}, 7, 0}, {{0, 0, 0, 0}, 7, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{1, 0, 1, 0}, 10, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 12, 0}, {{1, 0, 0, 1}, 12, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 1}, 12, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 0, 1}, 15, 0}, {{0, 0, 0, 1}, 15, 0}, {{0, 0, 0, 1}, 15, 0}, {{1, 0, 0, 0}, 15, 0}, {{0, 1, 0, 1}, 19, 0}, {{0, 0, 1, 1}, 19, 0}, {{1, 0, 1, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 0, 1}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 1}, 19, 0}, {{1, 0, 0, 0}, 19, 0}}, {{{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 1}, 8, 1}, {{0, 0, 0, 1}, 8, 1}, {{1, 0, 0, 1}, 8, 1}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{1, 0, 0, 0}, 10, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 0}, 12, 0}, {{0, 0, 0, 0}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 1}, 12, 0}, {{1, 1, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 1, 0}, 15, 0}, {{0, 1, 0, 0}, 15, 0}, {{0, 0, 1, 0}, 15, 0}, {{1, 0, 1, 0}, 15, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 0, 1}, 19, 0}, {{0, 1, 1, 0}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{1, 1, 1, 0}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 1, 1}, 7, 0}, {{0, 0, 1, 1}, 7, 0}, {{1, 0, 0, 0}, 7, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 1}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 1}, 10, 1}, {{0, 0, 0, 1}, 10, 1}, {{1, 0, 0, 1}, 10, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 1, 0}, 12, 0}, {{1, 1, 0, 1}, 12, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 1, 1}, 0, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 0}, 15, 0}, {{0, 0, 0, 0}, 15, 0}, {{1, 0, 0, 0}, 15, 0}, {{0, 1, 0, 1}, 19, 0}, {{0, 0, 1, 0}, 18, 1}, {{1, 0, 0, 0}, 18, 1}, {{1, 1, 0, 0}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 0, 0}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{0, 0, 0, 0}, 12, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 1, 1}, 15, 0}, {{0, 0, 0, 0}, 15, 0}, {{0, 0, 0, 1}, 15, 0}, {{0, 0, 0, 1}, 15, 0}, {{1, 0, 0, 1}, 15, 0}, {{1, 1, 1, 0}, 16, 0}, {{0, 1, 0, 0}, 18, 1}, {{1, 0, 0, 0}, 18, 1}, {{1, 1, 0, 0}, 17, 0}, {{1, 1, 0, 1}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{1, 0, 1, 0}, 10, 1}, {{1, 1, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 1, 0}, 10, 1}, {{1, 0, 1, 0}, 10, 1}, {{0, 1, 0, 0}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 12, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 1, 0}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 0, 0}, 16, 0}, {{0, 1, 0, 1}, 18, 1}, {{1, 0, 0, 1}, 18, 1}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 0, 1}, 19, 0}}, {{{0, 1, 1, 0}, 8, 1}, {{1, 0, 1, 0}, 8, 1}, {{1, 1, 0, 1}, 0, 0}, {{1, 1, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 1, 0}, 9, 0}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{1, 0, 0, 0}, 10, 1}, {{1, 1, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{0, 1, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 1}, 12, 0}, {{0, 0, 1, 1}, 12, 0}, {{1, 0, 1, 0}, 12, 0}, {{0, 1, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{1, 0, 1, 0}, 13, 1}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 1}, 16, 0}, {{1, 0, 1, 0}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 1, 0}, 19, 0}}, {{{0, 1, 0, 0}, 8, 1}, {{0, 0, 0, 0}, 8, 1}, {{0, 0, 1, 0}, 8, 1}, {{0, 0, 1, 1}, 8, 1}, {{1, 0, 0, 0}, 7, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{0, 0, 0, 0}, 10, 1}, {{1, 0, 0, 0}, 10, 1}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 10, 1}, {{0, 0, 0, 1}, 10, 1}, {{0, 0, 0, 1}, 10, 1}, {{1, 0, 0, 1}, 10, 1}, {{1, 1, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 1, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{1, 0, 1, 1}, 13, 1}, {{0, 1, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 1, 0}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 0, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{1, 1, 0, 0}, 19, 0}}, {{{0, 1, 0, 0}, 8, 1}, {{0, 0, 0, 0}, 8, 1}, {{1, 0, 0, 0}, 8, 1}, {{1, 1, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 0, 1}, 10, 1}, {{0, 0, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 10, 1}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 1}, 11, 0}, {{0, 0, 1, 0}, 11, 0}, {{0, 0, 1, 0}, 11, 0}, {{0, 0, 1, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 0, 0}, 15, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 1, 0}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 0, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 1, 1}, 17, 0}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 0, 1}, 19, 0}, {{0, 0, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 8, 1}, {{0, 0, 0, 1}, 8, 1}, {{1, 0, 0, 1}, 8, 1}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 0, 0}, 7, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 0, 0}, 9, 0}, {{0, 0, 1, 1}, 11, 0}, {{0, 0, 0, 0}, 11, 0}, {{1, 0, 0, 0}, 11, 0}, {{0, 1, 1, 0}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{1, 0, 0, 1}, 13, 0}, {{0, 1, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{1, 0, 0, 1}, 13, 1}, {{1, 1, 0, 1}, 0, 0}, {{0, 1, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 0, 0}, 15, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 0, 1}, 16, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 1, 0}, 16, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{1, 1, 1, 0}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 0, 0}, 0, 0}, {{0, 1, 0, 1}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 1, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 0}, 11, 0}, {{0, 0, 0, 0}, 11, 0}, {{1, 0, 0, 0}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{1, 1, 1, 0}, 0, 0}, {{0, 1, 1, 0}, 13, 1}, {{0, 0, 1, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{0, 0, 0, 0}, 13, 1}, {{1, 0, 0, 0}, 13, 1}, {{1, 1, 0, 0}, 15, 0}, {{0, 1, 0, 1}, 16, 0}, {{1, 0, 1, 0}, 16, 0}, {{1, 1, 1, 0}, 16, 0}, {{1, 1, 0, 0}, 16, 0}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 1, 1}, 19, 0}, {{0, 0, 1, 0}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 0, 1}, 11, 0}, {{0, 0, 0, 1}, 11, 0}, {{1, 0, 0, 1}, 11, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 0, 0}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{1, 1, 0, 1}, 0, 0}, {{0, 1, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{0, 0, 0, 1}, 13, 1}, {{1, 0, 0, 1}, 13, 1}, {{0, 1, 0, 1}, 15, 0}, {{0, 0, 1, 1}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 0, 0}, 16, 0}, {{1, 0, 0, 1}, 16, 0}, {{0, 1, 0, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 0, 1}, 19, 0}}, {{{0, 1, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{0, 1, 1, 0}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 0}, 9, 0}, {{0, 1, 1, 0}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{1, 0, 0, 0}, 13, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 1, 0}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 0, 0}, 19, 0}, {{0, 0, 1, 0}, 19, 0}}, {{{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 0, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{0, 0, 1, 1}, 9, 0}, {{1, 0, 0, 1}, 9, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 0}, 13, 0}, {{1, 0, 1, 0}, 13, 0}, {{1, 1, 0, 0}, 13, 0}, {{1, 1, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 14, 1}, {{1, 1, 1, 1}, 0, 0}, {{0, 1, 1, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{1, 1, 0, 0}, 0, 0}, {{1, 1, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 16, 0}, {{0, 1, 0, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 0, 1}, 19, 0}, {{1, 0, 0, 1}, 19, 0}, {{0, 1, 0, 0}, 19, 0}}, {{{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 0, 1}, 13, 0}, {{0, 0, 0, 1}, 13, 0}, {{0, 0, 0, 1}, 13, 0}, {{0, 0, 0, 0}, 13, 0}, {{0, 0, 1, 1}, 13, 0}, {{0, 0, 0, 1}, 13, 0}, {{0, 0, 1, 0}, 13, 0}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{1, 1, 0, 0}, 17, 0}, {{1, 1, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 0, 0}, 19, 0}}, {{{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 13, 0}, {{0, 1, 1, 1}, 0, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{1, 0, 1, 0}, 20, 0}, {{0, 1, 1, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{0, 1, 0, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 0, 1}, 17, 0}, {{1, 1, 1, 0}, 20, 0}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 0, 0}, 19, 0}, {{0, 0, 0, 0}, 19, 0}, {{0, 0, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 0, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 1, 0}, 20, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 20, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 20, 0}, {{0, 0, 1, 0}, 20, 0}, {{1, 0, 0, 0}, 20, 0}, {{0, 1, 0, 1}, 17, 0}, {{0, 0, 1, 1}, 17, 0}, {{1, 0, 1, 0}, 17, 0}, {{1, 1, 0, 0}, 19, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 0}, 19, 0}, {{0, 0, 0, 0}, 19, 0}}, {{{0, 1, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 1, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 1, 1}, 14, 1}, {{1, 0, 1, 0}, 14, 1}, {{0, 1, 0, 1}, 20, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 20, 0}, {{0, 0, 0, 0}, 20, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 1}, 20, 0}, {{0, 0, 0, 0}, 20, 0}, {{0, 0, 1, 0}, 0, 0}, {{1, 0, 1, 0}, 0, 0}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 0, 1}, 19, 0}, {{1, 0, 1, 0}, 19, 0}, {{0, 1, 0, 1}, 19, 0}, {{0, 0, 0, 0}, 19, 0}}, {{{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 0, 0}, 0, 0}, {{0, 1, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{1, 1, 0, 0}, 0, 0}, {{0, 1, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 0}, 14, 1}, {{1, 0, 0, 0}, 14, 1}, {{0, 1, 1, 0}, 20, 0}, {{0, 0, 1, 0}, 20, 0}, {{1, 0, 1, 0}, 20, 0}, {{0, 1, 0, 1}, 14, 1}, {{1, 0, 1, 1}, 14, 1}, {{0, 1, 0, 0}, 0, 0}, {{0, 0, 0, 0}, 20, 0}, {{0, 0, 0, 0}, 0, 0}, {{1, 0, 0, 0}, 0, 0}, {{1, 1, 1, 0}, 17, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{1, 1, 0, 0}, 17, 0}, {{0, 1, 1, 0}, 19, 0}, {{0, 0, 0, 0}, 19, 0}, {{1, 0, 1, 0}, 0, 0}, {{0, 1, 0, 1}, 19, 0}}, {{{1, 1, 1, 1}, 0, 0}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 0, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{0, 0, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 0, 1}, 0, 0}, {{0, 0, 1, 1}, 0, 0}, {{1, 0, 1, 1}, 0, 0}, {{0, 1, 0, 1}, 14, 1}, {{1, 0, 0, 1}, 14, 1}, {{0, 1, 0, 1}, 20, 0}, {{0, 0, 0, 1}, 20, 0}, {{0, 0, 0, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 1, 1}, 20, 0}, {{0, 0, 0, 1}, 0, 0}, {{0, 0, 0, 1}, 20, 0}, {{0, 0, 0, 1}, 20, 0}, {{1, 0, 0, 1}, 0, 0}, {{0, 1, 0, 0}, 17, 0}, {{0, 0, 1, 0}, 17, 0}, {{0, 0, 1, 0}, 17, 0}, {{0, 0, 1, 0}, 17, 0}, {{1, 0, 0, 0}, 17, 0}, {{0, 1, 0, 1}, 19, 0}, {{0, 0, 0, 1}, 19, 0}, {{0, 0, 0, 1}, 19, 0}, {{1, 0, 1, 1}, 0, 0}}};
static int rock[][2] = {{33, 1}, {34, 1}, {40, 1}, {41, 1}, {33, 2}, {34, 2}, {40, 2}, {41, 2}, {42, 2}, {33, 3}, {34, 3}, {40, 3}, {41, 3}, {42, 3}, {27, 4}, {28, 4}, {29, 4}, {31, 4}, {32, 4}, {33, 4}, {34, 4}, {40, 4}, {41, 4}, {42, 4}, {40, 5}, {41, 5}, {42, 5}, {36, 6}, {40, 6}, {41, 6}, {42, 6}, {36, 7}, {36, 8}, {38, 8}, {39, 8}, {38, 9}, {39, 9}, {42, 9}, {38, 10}, {39, 10}, {42, 10}, {38, 11}, {38, 12}, {38, 13}, {38, 14}, {38, 15}, {34, 17}, {35, 17}, {36, 17}, {38, 17}, {38, 18}, {39, 18}, {40, 18}, {41, 18}, {42, 18}, {42, 19}, {28, 20}, {29, 20}, {42, 20}, {28, 21}, {29, 21}, {26, 23}, {28, 23}, {26, 24}, {28, 24}, {33, 24}, {34, 24}, {26, 25}, {28, 25}, {29, 25}, {35, 25}, {36, 25}, {37, 25}, {26, 26}, {28, 26}, {29, 26}, {31, 26}, {32, 26}, {35, 26}, {36, 26}, {37, 26}, {25, 27}, {26, 27}, {28, 27}, {35, 27}, {36, 27}, {37, 27}, {35, 28}, {28, 29}, {35, 29}, {28, 30}, {35, 30}, {35, 31}, {36, 31}, {37, 31}, {35, 32}, {36, 32}, {35, 33}, {36, 33}, {18, 34}, {18, 35}, {38, 35}, {18, 36}, {38, 36}, {18, 37}, {18, 38}, {19, 38}, {20, 38}, {18, 39}, {19, 39}, {20, 39}, {18, 40}, {19, 40}, {20, 40}};
static struct e_status enemy[] = {{1, {1, 0, 0}, "冒険者", 1, 0, 0, 0, 0, 0, 0, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 20, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {1, 26, 51, 0, 0, 0, 0, 0, 0, 0}}, {2, {1, 2, 0}, "コボルド", 1, 0, 0, 0, 0, 0, 0, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 50, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {1, 153, 2, 180, 0, 0, 0, 0, 0, 0}}, {3, {2, 0, 0}, "オーク", 1, 0, 0, 0, 0, 0, 0, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 1, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {2, 180, 51, 153, 162, 0, 0, 0, 0, 0}}, {4, {2, 3, 4}, "盗賊", 1, 0, 0, 0, 0, 0, 0, 0, {{1, 50}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 60, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {2, 153, 154, 174, 0, 0, 0, 0, 0, 0}}, {5, {3, 4, 0}, "エンプーサ", 1, 0, 0, 0, 0, 0, 0, 0, {{2, 25}, {3, 21}, {4, 22}, {5, 22}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 10, 4, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {180, 0, 163, 170, 164, 0, 0, 0, 0, 0}}, {6, {3, 4, 0}, "スケルトン", 1, 0, 0, 0, 0, 0, 0, 0, {{6, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 2, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {180, 153, 155, 51, 52, 0, 0, 0, 0, 0}}, {7, {4, 5, 0}, "トレント", 1, 0, 0, 0, 0, 0, 0, 0, {{7, 100}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 4, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {180, 155, 173, 164, 0, 0, 0, 0, 0, 0}}, {8, {5, 0, 0}, "盗賊の棟梁", 1, 0, 0, 0, 0, 0, 0, 0, {{8, 30}, {9, 10}, {10, 30}, {11, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {3, 28, 53, 164, 0, 0, 0, 0, 0, 0}}, {9, {6, 7, 0}, "ゾンビ", 1, 0, 0, 0, 0, 0, 0, 0, {{12, 50}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0}, {181, 3, 55, 157, 0, 0, 0, 0, 0, 0}}, {10, {7, 8, 0}, "ガーゴイル", 1, 0, 0, 0, 0, 0, 0, 0, {{13, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 20, 3, {0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0}, {181, 174, 3, 54, 157, 165, 0, 0, 0, 0}}, {11, {7, 8, 9}, "ミノタウロス", 1, 0, 0, 0, 0, 0, 0, 0, {{14, 70}, {15, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 4, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {181, 28, 172, 157, 0, 0, 0, 0, 0, 0}}, {12, {9, 10, 0}, "ウィザード", 1, 0, 0, 0, 0, 0, 0, 0, {{16, 30}, {17, 10}, {18, 10}, {19, 10}, {20, 10}, {21, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {165, 171, 172, 173, 174, 175, 0, 0, 0, 0}}, {13, {9, 10, 11}, "ポーパルバニー", 1, 0, 0, 0, 0, 0, 0, 0, {{22, 50}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 20, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {181, 182, 176, 4, 79, 165, 0, 0, 0, 0}}, {14, {10, 11, 12}, "アンデッド", 1, 0, 0, 0, 0, 0, 0, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 3, {0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0}, {181, 0, 0, 165, 0, 0, 0, 0, 0, 0}}, {15, {12, 13, 0}, "討伐兵", 1, 0, 0, 0, 0, 0, 0, 0, {{21, 20}, {23, 20}, {24, 40}, {25, 10}, {26, 10}, {27, 10}, {28, 10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {4, 29, 57, 68, 79, 90, 165, 175, 0, 0}}, {16, {13, 14, 15}, "モルモ", 1, 0, 0, 0, 0, 0, 0, 0, {{13, 50}, {29, 50}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 2, {0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {57, 181, 165, 174, 0, 0, 0, 0, 0, 0}}, {17, {14, 15, 0}, "インキュバス", 1, 0, 0, 0, 0, 0, 0, 0, {{30, 70}, {31, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 40, 2, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {181, 182, 159, 0, 0, 0, 0, 0, 0, 0}}, {18, {14, 15, 0}, "騎士", 1, 0, 0, 0, 0, 0, 0, 0, {{21, 15}, {32, 30}, {33, 20}, {34, 20}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {40, 4, 101, 112, 123, 134, 159, 0, 0, 0}}, {19, {16, 17, 0}, "王撰騎士", 1, 0, 0, 0, 0, 0, 0, 0, {{32, 40}, {33, 20}, {35, 20}, {36, 20}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 5, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {15, 40, 101, 112, 123, 134, 165, 159, 0, 0}}, {20, {16, 17, 0}, "デュラハン", 1, 0, 0, 0, 0, 0, 0, 0, {{37, 40}, {38, 20}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {181, 182, 171, 15, 40, 123, 0, 0, 0, 0}}, {21, {17, 18, 0}, "デビル", 1, 0, 0, 0, 0, 0, 0, 0, {{39, 30}, {40, 50}, {41, 20}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0}, {182, 15, 159, 0, 0, 0, 0, 0, 0, 0}}, {22, {18, 19, 20}, "ケルベロス", 3, 0, 0, 0, 0, 0, 0, 0, {{42, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {182, 171, 175, 0, 0, 0, 0, 0, 0, 0}}, {23, {19, 20, 0}, "キマイラ", 3, 0, 0, 0, 0, 0, 0, 0, {{43, 35}, {44, 35}, {45, 30}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0}, {182, 40, 171, 172, 159, 0, 0, 0, 0, 0}}, {24, {19, 20, 0}, "ヒドラ", 9, 0, 0, 0, 0, 0, 0, 0, {{46, 50}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {182, 173, 159, 0, 0, 0, 0, 0, 0, 0}}, {25, {19, 20, 0}, "ゴルゴン", 3, 0, 0, 0, 0, 0, 0, 0, {{47, 100}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {182, 176, 159, 0, 0, 0, 0, 0, 0, 0}}, {26, {72, 0, 0}, "魔人エリヌス", 1, 0, 0, 0, 0, 0, 0, 0, {{48, 0}, {49, 0}, {50, 0}, {51, 0}, {52, 0}, {53, 0}, {54, 0}, {55, 0}, {56, 0}, {57, 0}, {58, 0}, {59, 40}, {60, 60}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 30}, {161, 166, 176, 177, 0, 0, 0, 0, 0, 0}}, {27, {100, 0, 0}, "魔人トゥオタック", 2, 0, 0, 0, 0, 0, 0, 0, {{61, 40}, {62, 0}, {63, 60}, {64, 0}, {65, 0}, {66, 0}, {67, 0}, {68, 0}, {69, 30}, {70, 40}, {71, 30}, {72, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, 0, 0, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 10, 100}, {179, 161, 166, 167, 168, 0, 176, 177, 0, 0}}, {28, {240, 0, 0}, "魔王", 3, 0, 0, 0, 0, 0, 0, 0, {{73, 0}, {74, 6}, {75, 6}, {76, 6}, {77, 6}, {78, 10}, {79, 15}, {80, 10}, {81, 16}, {82, 0}, {83, 0}, {84, 30}, {85, 30}, {86, 40}, {87, 0}, {88, 35}, {89, 35}, {90, 30}, {91, 30}, {92, 30}, {93, 20}, {94, 20}}, 0, 0, {0, 0, 0, 0, 0, 0}, {50, 50, 50, 50, 50, 100}, {184, 161, 166, 167, 168, 169, 176, 177, 0, 0}}};
static struct deta skill[] = {{1, "バブルシールド", 1, 2, 1, 8, 3, 3, 5, 0}, {2, "マナヒート", 1, 0, 2, 10, 2, 2, 10, 0}, {3, "バードアイ", 2, 5, 9, 0, 0, 0, 0, 0}, {4, "ウオーターガン", 2, 2, 5, 6, 4, 1, 0, 0}, {5, "ヒートディフェンス", 2, 1, 1, 8, 3, 3, 15, 0}, {6, "リメディ", 3, 5, 7, 50, 4, 1, 0, 0}, {7, "クレイシェルター", 3, 3, 1, 8, 3, 3, 5, 0}, {8, "ファイヤリング", 3, 1, 5, 6, 4, 1, 0, 0}, {9, "パワーヒート", 4, 0, 0, 10, 3, 2, 10, 0}, {10, "ストロードル", 4, 4, 5, 8, 3, 1, 0, 0}, {11, "スリング", 4, 3, 5, 6, 4, 1, 0, 0}, {12, "スリープ", 5, 1, 8, 55, 6, 3, 15, 0}, {13, "シャドウ", 5, 0, 4, 10, 2, 2, 10, 0}, {14, "シードガン", 5, 4, 5, 6, 4, 1, 0, 0}, {15, "ステルス", 6, 0, 4, 20, 5, 2, 15, 0}, {16, "斬り返し", 6, 0, 6, 6, 8, 2, 0, 0}, {17, "ポイズン", 7, 3, 8, 65, 6, 5, 25, 0}, {18, "EXチェック", 7, 0, 9, 0, 0, 0, 0, 0}, {19, "パワーブースト", 8, 0, 0, 25, 12, 4, 15, 0}, {20, "突撃", 8, 0, 6, 18, 12, 1, 0, 0}, {21, "マナバースト", 9, 0, 2, 25, 15, 4, 10, 0}, {22, "ゾーン", 9, 5, 3, 5, 24, 2, 5, 0}, {23, "エーテル破壊天線", 10, 0, 5, 0, 10, 1, 0, 0}, {24, "ランダムワープ", 10, 5, 9, 0, 12, 0, 0, 0}, {25, "ヒール", 11, 5, 7, 130, 16, 1, 0, 0}, {26, "アイスウオール", 11, 2, 1, 18, 8, 3, 20, 0}, {27, "逃げさせろ！", 11, 0, 9, 10, 18, 2, 0, 0}, {28, "アクアビーム", 12, 2, 5, 15, 10, 1, 0, 0}, {29, "ファイヤバリア", 12, 1, 1, 18, 8, 3, 20, 0}, {30, "バーン", 12, 2, 8, 82, 5, 3, 5, 0}, {31, "フレイムブロウ", 13, 1, 5, 15, 10, 1, 0, 0}, {32, "三段斬り", 13, 0, 6, 7, 19, 3, 0, 0}, {33, "ストーンウオール", 13, 3, 1, 18, 8, 3, 35, 0}, {34, "ブラインド", 14, 4, 8, 31, 5, 3, 15, 0}, {35, "ロックキャノン", 14, 3, 5, 15, 10, 1, 0, 0}, {36, "ヴァインネット", 14, 4, 1, 18, 8, 3, 20, 0}, {37, "破城木", 15, 4, 5, 15, 10, 1, 0, 0}, {38, "フェードオフ", 15, 0, 4, 20, 12, 3, 15, 0}, {39, "狙撃用意", 16, 0, 4, 32, 16, 3, 25, 0}, {40, "黄金率", 16, 5, 9, 20, 25, 2, 0, 0}, {41, "魂削り", 17, 0, 9, 2, 40, 2, 0, 0}, {42, "白色破壊天線", 17, 0, 5, 20, 30, 1, 0, 0}, {43, "ポイントワープ", 18, 0, 9, 0, 30, 0, 0, 0}, {44, "天使の守護", 18, 5, 1, 30, 20, 4, 25, 0}, {45, "天の鉄槌", 19, 5, 5, 42, 22, 1, 0, 0}, {46, "突撃 -零-", 19, 0, 6, 55, 35, 1, 0, 0}, {47, "逃がすか！", 20, 0, 9, 10, 6, 3, 10, 0}, {48, "限界開放", 20, 5, 3, 25, 58, 4, 15, 0}, {49, "セット:パワー", 21, 0, 0, 50, 25, 4, 30, 0}, {50, "セット:マナ", 22, 0, 2, 50, 32, 4, 30, 0}, {51, "逆上", 23, 0, 9, 40, 10, 4, 20, 0}, {52, "金縛り", 24, 5, 8, 20, 11, 3, 20, 0}, {53, "タイプランダムチェンジ", 25, 5, 9, 0, 10, 4, 10, 0}, {54, "アタック", 25, 0, 6, 32, 0, 5, 0, 0}, {55, "EXP増加", 26, 0, 9, 0, 20, 4, 0, 0}, {56, "リキッドアーマー", 26, 2, 1, 32, 18, 3, 15, 0}, {57, "メディカ", 27, 5, 7, 350, 23, 1, 0, 0}, {58, "ストリームカタラクト", 27, 2, 5, 44, 25, 1, 0, 0}, {59, "ブレイズブロック", 27, 1, 1, 32, 18, 4, 30, 0}, {60, "黄金率A", 28, 5, 9, 60, 45, 5, 20, 0}, {61, "ブレイズブラスト", 28, 1, 5, 50, 25, 1, 0, 0}, {62, "ロッククリフ", 28, 3, 1, 32, 18, 5, 35, 0}, {63, "未来視", 29, 0, 4, 32, 12, 1, 40, 0}, {64, "メタルフォール", 29, 3, 5, 56, 25, 1, 0, 0}, {65, "ホールフォレスト", 29, 4, 1, 32, 18, 6, 15, 0}, {66, "フォレストボディアウト", 30, 4, 5, 52, 25, 1, 0, 0}, {67, "真・狙撃用意", 30, 0, 4, 69, 30, 6, 30, 0}, {68, "死兵", 35, 0, 6, 200, 150, 7, 35, 0}, {69, "激昂", 40, 0, 9, 80, 23, 8, 40, 0}, {70, "石化", 45, 5, 8, 65, 25, 3, 35, 0}, {71, "偽直死", 50, 0, 9, 14, 60, 1, 0, 0}, {72, "覚醒", 55, 5, 3, 50, 80, 4, 20, 0}, {73, "覚醒 -極-", 75, 5, 3, 120, 222, 6, 45, 0}, {74, "直死", 80, 0, 9, 100, 0, 1, 0, 0}, {75, "覚醒 -覇-", 1000, 5, 3, 3000, 19900, 7, 35, 0}, {76, "覚醒 -魔王-", 10001, 0, 3, 10000, 80000, 20, 80, 0}};
static struct deta2 e_skill[] = {{1, "ステルス", 0, 4, {15, 0, 0, 0, 0}, 5, {3, 0, 0, 0, 0}, 0}, {2, "スリープ", 1, 8, {30, 0, 0, 0, 0}, 7, {4, 0, 0, 0, 0}, 0}, {3, "ファイアブレス", 1, 5, {5, 0, 0, 0, 0}, 4, {0, 0, 0, 0, 0}, 0}, {4, "ソーンラップ", 4, 5, {4, 0, 0, 0, 0}, 2, {0, 0, 0, 0, 0}, 0}, {5, "吸血", 0, 6, {15, 0, 0, 0, 0}, 9, {0, 0, 0, 0, 0}, 0}, {6, "自己修復", 0, 9, {30, 0, 0, 0, 0}, 21, {0, 0, 0, 0, 0}, 0}, {7, "テイクルート", 4, 9, {25, 60, 0, 0, 0}, 12, {4, 0, 0, 0, 0}, 0}, {8, "三連切り", 0, 6, {12, 0, 0, 0, 0}, 10, {0, 0, 0, 0, 0}, 0}, {9, "ヒール", 0, 7, {38, 0, 0, 0, 0}, 13, {0, 0, 0, 0, 0}, 0}, {10, "ランダムマジック", 0, 5, {20, 0, 0, 0, 0}, 11, {0, 0, 0, 0, 0}, 0}, {11, "溜め斬り", 0, 6, {40, 0, 0, 0, 0}, 13, {0, 0, 0, 0, 0}, 0}, {12, "噛みつきゾンビ化", 0, 6, {8, 0, 0, 0, 0}, 13, {5, 0, 0, 0, 0}, 0}, {13, "暗黒", 4, 8, {15, 0, 0, 0, 0}, 18, {3, 0, 0, 0, 0}, 0}, {14, "ランダムスラッシュ", 0, 6, {8, 0, 0, 0, 0}, 18, {5, 0, 0, 0, 0}, 0}, {15, "ラビュリントス", 0, 9, {50, 0, 0, 0, 0}, 7, {5, 0, 0, 0, 0}, 0}, {16, "タイプランダムチェンジ", 0, 9, {50, 0, 0, 0, 0}, 14, {6, 0, 0, 0, 0}, 0}, {17, "炎の奔流", 1, 5, {40, 0, 0, 0, 0}, 21, {0, 0, 0, 0, 0}, 0}, {18, "水の瀑布", 2, 5, {36, 0, 0, 0, 0}, 18, {0, 0, 0, 0, 0}, 0}, {19, "怒涛の森", 4, 5, {45, 0, 0, 0, 0}, 25, {0, 0, 0, 0, 0}, 0}, {20, "岩の雨", 3, 5, {49, 0, 0, 0, 0}, 29, {0, 0, 0, 0, 0}, 0}, {21, "メディカ", 0, 7, {86, 0, 0, 0, 0}, 32, {0, 0, 0, 0, 0}, 0}, {22, "首はね", 0, 9, {50, 0, 0, 0, 0}, 35, {0, 0, 0, 0, 0}, 0}, {23, "会心の一撃", 0, 6, {68, 0, 0, 0, 0}, 42, {0, 0, 0, 0, 0}, 0}, {24, "乱れ撃ち", 0, 6, {19, 0, 0, 0, 0}, 36, {3, 0, 0, 0, 0}, 0}, {25, "火の斬撃", 1, 6, {32, 0, 0, 0, 0}, 23, {0, 0, 0, 0, 0}, 0}, {26, "水の斬撃", 2, 6, {32, 0, 0, 0, 0}, 23, {0, 0, 0, 0, 0}, 0}, {27, "緑の斬撃", 4, 6, {32, 0, 0, 0, 0}, 23, {0, 0, 0, 0, 0}, 0}, {28, "岩の斬撃", 3, 6, {32, 0, 0, 0, 0}, 23, {0, 0, 0, 0, 0}, 0}, {29, "吸血", 2, 9, {38, 50, 30, 0, 0}, 50, {2, 0, 0, 0, 0}, 0}, {30, "エナジードレイン", 0, 9, {45, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0}, 0}, {31, "魅惑", 0, 9, {20, 0, 0, 0, 0}, 18, {5, 0, 0, 0, 0}, 0}, {32, "ホーリーランス", 5, 6, {74, 0, 0, 0, 0}, 48, {3, 0, 0, 0, 0}, 0}, {33, "断罪", 5, 9, {92, 5, 0, 0, 0}, 74, {6, 0, 0, 0, 0}, 0}, {34, "聖なる加護", 5, 3, {30, 0, 0, 0, 0}, 82, {7, 0, 0, 0, 0}, 0}, {35, "騎士の誓い", 0, 9, {50, 20, 0, 0, 0}, 63, {3, 0, 0, 0, 0}, 0}, {36, "王撰騎士の誇り", 0, 9, {80, 0, 0, 0, 0}, 55, {3, 0, 0, 0, 0}, 0}, {37, "奪首", 0, 9, {50, 0, 0, 0, 0}, 52, {0, 0, 0, 0, 0}, 0}, {38, "亡執", 0, 0, {100, 0, 0, 0, 0}, 82, {6, 0, 0, 0, 0}, 0}, {39, "誘惑", 0, 9, {0, 0, 0, 0, 0}, 43, {7, 0, 0, 0, 0}, 0}, {40, "呪いの槍", 0, 8, {54, 2, 3, 0, 0}, 88, {5, 0, 0, 0, 0}, 0}, {41, "取引", 0, 9, {67, 103, 0, 0, 0}, 34, {0, 0, 0, 0, 0}, 0}, {42, "冥府の門番", 0, 9, {0, 0, 0, 0, 0}, 43, {7, 0, 0, 0, 0}, 0}, {43, "ファイアブレス", 1, 5, {89, 2, 0, 0, 0}, 112, {8, 0, 0, 0, 0}, 0}, {44, "噛みつき", 0, 6, {93, 3, 0, 0, 0}, 119, {8, 0, 0, 0, 0}, 0}, {45, "羽ばたき", 0, 6, {106, 0, 0, 0, 0}, 118, {0, 0, 0, 0, 0}, 0}, {46, "瘴気", 3, 8, {53, 0, 0, 0, 0}, 64, {8, 0, 0, 0, 0}, 0}, {47, "見る", 5, 8, {30, 0, 0, 0, 0}, 0, {1, 0, 0, 0, 0}, 0}, {48, "マナフィールド", 0, 2, {30, 1, 0, 0, 0}, 26, {3, 0, 0, 0, 0}, 0}, {49, "乱撃", 0, 6, {247, 10, 0, 0, 0}, 82, {4, 0, 0, 0, 0}, 0}, {50, "渾身の一撃", 0, 6, {453, 0, 0, 0, 0}, 138, {5, 0, 0, 0, 0}, 0}, {51, "吼える", 0, 9, {10, 0, 0, 0, 0}, 52, {4, 0, 0, 0, 0}, 0}, {52, "ブレイズ[オーラニア・フォティア]", 1, 5, {800, 0, 0, 0, 0}, 3, {0, 0, 0, 0, 0}, 0}, {53, "カタラクト[トライデント]", 2, 5, {800, 0, 0, 0, 0}, 3, {0, 0, 0, 0, 0}, 0}, {54, "メタル[アダマス]", 3, 5, {800, 0, 0, 0, 0}, 3, {0, 0, 0, 0, 0}, 0}, {55, "フォレスト[テスモポリア]", 4, 5, {800, 0, 0, 0, 0}, 3, {0, 0, 0, 0, 0}, 0}, {56, "アイアスモード", 0, 1, {80, 0, 0, 0, 0}, 93, {5, 0, 0, 0, 0}, 0}, {57, "ライフフィールド", 0, 7, {3, 0, 0, 0, 0}, 158, {5, 0, 0, 0, 0}, 0}, {58, "全力の一撃", 0, 6, {920, 120, 0, 0, 0}, 290, {1, 0, 0, 0, 0}, 0}, {59, "威圧", 0, 9, {50, 0, 0, 0, 0}, 117, {3, 0, 0, 0, 0}, 0}, {60, "シールドサイクロン", 0, 6, {10, 50, 0, 0, 0}, 96, {1, 0, 0, 0, 0}, 0}, {61, "二射突撃", 0, 6, {152, 3, 432, 0, 0}, 93, {7, 2, 0, 0, 0}, 0}, {62, "肉林", 0, 9, {80, 50, 10, 40, 0}, 268, {3, 0, 0, 0, 0}, 0}, {63, "騎馬猛撃", 0, 6, {2, 5, 793, 0}, 396, {0, 0, 0, 0, 0}, 0}, {64, "酒池", 0, 7, {4000, 20, 30, 80, 0}, 439, {7, 0, 0, 0, 0}, 0}, {65, "暴虐なる支配者", 0, 6, {200, 784, 0, 0, 0}, 3, {1, 0, 0, 0, 0}, 0}, {66, "二射大猛撃", 0, 6, {152, 3, 132, 3, 0}, 134, {3, 0, 0, 0, 0}, 0}, {67, "酒池肉林", 0, 4, {10, 80, 25, 40, 80}, 217, {3, 6, 0, 0, 0}, 0}, {68, "天下の簒奪者", 0, 6, {10, 300, 963, 0, 0}, 5, {1, 0, 0, 0, 0}, 0}, {69, "大射大猛撃", 0, 6, {62, 3, 5, 92, 8}, 217, {9, 0, 0, 0, 0}, 0}, {70, "騎馬大突撃", 0, 6, {10, 1362, 0, 0, 0}, 394, {0, 0, 0, 0, 0}, 0}, {71, "大暴虐", 0, 6, {50, 800, 0, 0, 0}, 459, {6, 0, 0, 0, 0}, 0}, {72, "大乱の因", 0, 6, {100, 30, 500, 1925, 0}, 3, {7, 1, 0, 0, 0}, 0}, {73, "咆哮", 0, 9, {0, 0, 0, 0, 0}, 78, {0, 0, 0, 0, 0}, 0}, {74, "炎爆風", 1, 5, {1726, 0, 0, 0, 0}, 564, {3, 0, 0, 0, 0}, 0}, {75, "嵐大荒", 2, 5, {1726, 0, 0, 0, 0}, 564, {3, 0, 0, 0, 0}, 0}, {76, "盤壊落", 3, 5, {1726, 0, 0, 0, 0}, 564, {3, 0, 0, 0, 0}, 0}, {77, "生豪流", 4, 5, {1726, 0, 0, 0, 0}, 564, {3, 0, 0, 0, 0}, 0}, {78, "リス猛撃", 0, 6, {6064, 0, 0, 0, 0}, 967, {1, 0, 0, 0, 0}, 0}, {79, "弓射撃", 0, 6, {1345, 0, 0, 0, 0}, 127, {0, 0, 0, 0, 0}, 0}, {80, "強弓射撃", 0, 6, {2712, 0, 0, 0, 0}, 267, {1, 0, 0, 0, 0}, 0}, {81, "突撃", 0, 6, {3026, 0, 0, 0, 0}, 492, {0, 0, 0, 0, 0}, 0}, {82, "強圧", 0, 9, {0, 0, 0, 0, 0}, 93, {4, 0, 0, 0, 0}, 0}, {83, "魔力暴発", 0, 9, {0, 0, 0, 0, 0}, 1275, {0, 0, 0, 0, 0}, 0}, {84, "薙ぎ払い", 0, 6, {250, 9700, 0, 0, 0}, 1217, {3, 1, 0, 0, 0}, 0}, {85, "叩き圧さえ", 0, 6, {250, 10450, 0, 0, 0}, 1846, {3, 0, 0, 0, 0}, 0}, {86, "強魔弓", 0, 6, {200, 2267, 1165, 0, 0}, 1190, {3, 5, 4, 0, 0}, 0}, {87, "魔王の本能", 0, 9, {500, 700, 40, 0, 0}, 1624, {6, 0, 0, 0, 0}, 0}, {88, "破壊の衝動", 0, 6, {80, 40, 17670, 0, 0}, 1572, {3, 5, 0, 0, 0}, 0}, {89, "殺戮の衝動", 0, 6, {300, 80, 20972, 0, 0}, 1754, {1, 0, 0, 0, 0}, 0}, {90, "魔王の特権", 0, 9, {0, 0, 0, 0, 0}, 2692, {0, 0, 0, 0, 0}, 0}, {91, "臆病", 0, 9, {180, 200, 0, 0, 0}, 1297, {8, 0, 0, 0, 0}, 0}, {92, "執念", 0, 7, {5, 200, 40, 0, 0}, 1926, {5, 0, 0, 0, 0}, 0}, {93, "雄叫び", 0, 0, {120, 0, 0, 0, 0}, 763, {5, 0, 0, 0, 0}, 0}, {94, "全力の抵抗", 0, 6, {800, 4876, 0, 0, 0}, 3245, {1, 10, 0, 0, 0}, 0}};
static struct item all_item[] = {{1, "木の棒", 0, 0, {2, 3}, {10, 0}, 4, 30}, {2, "錆び欠けの剣", 0, 0, {2, 7}, {30, 0}, 70, 30}, {3, "銑鉄の剣", 0, 0, {0, 0}, {80, 0}, 500, 25}, {4, "鋼の剣", 0, 0, {0, 0}, {150, 0}, 2500, 13}, {5, "鋼の剣+1", 0, 0, {0, -1}, {165, 0}, 2750}, {6, "鋼の剣+2", 0, 0, {0, -1}, {180, 0}, 3000}, {7, "鋼の剣+3", 0, 0, {0, -1}, {195, 0}, 3250}, {8, "鋼の剣+4", 0, 0, {0, -1}, {210, 0}, 3500}, {9, "鋼の剣+5", 0, 0, {0, -1}, {225, 0}, 3750}, {10, "鋼の剣+6", 0, 0, {0, -1}, {240, 0}, 4000}, {11, "鋼の剣+7", 0, 0, {0, -1}, {255, 0}, 4250}, {12, "鋼の剣+8", 0, 0, {0, -1}, {270, 0}, 4500}, {13, "鋼の剣+9", 0, 0, {0, -1}, {285, 0}, 4750}, {14, "鋼の剣+10", 0, 0, {0, -1}, {300, 0}, 5000}, {15, "名匠の剣", 0, 0, {0, 0}, {400, 0}, 4500, 8}, {16, "名匠の剣+1", 0, 0, {0, -1}, {440, 0}, 4950}, {17, "名匠の剣+2", 0, 0, {0, -1}, {480, 0}, 5400}, {18, "名匠の剣+3", 0, 0, {0, -1}, {520, 0}, 5850}, {19, "名匠の剣+4", 0, 0, {0, -1}, {560, 0}, 6300}, {20, "名匠の剣+5", 0, 0, {0, -1}, {600, 0}, 6750}, {21, "名匠の剣+6", 0, 0, {0, -1}, {640, 0}, 7200}, {22, "名匠の剣+7", 0, 0, {0, -1}, {680, 0}, 7650}, {23, "名匠の剣+8", 0, 0, {0, -1}, {720, 0}, 8100}, {24, "名匠の剣+9", 0, 0, {0, -1}, {760, 0}, 8550}, {25, "名匠の剣+10", 0, 0, {0, -1}, {800, 0}, 9000}, {26, "木の板", 1, 0, {2, 2}, {7, 0}, 2, 30}, {27, "錆び欠けの盾", 1, 0, {2, 5}, {22, 0}, 80, 25}, {28, "銑鉄の盾", 1, 0, {0, 0}, {65, 0}, 400, 17}, {29, "鋼の盾", 1, 0, {0, 0}, {150, 0}, 2000, 13}, {30, "鋼の盾+1", 1, 0, {0, -1}, {165, 0}, 2200}, {31, "鋼の盾+2", 1, 0, {0, -1}, {180, 0}, 2400}, {32, "鋼の盾+3", 1, 0, {0, -1}, {195, 0}, 2600}, {33, "鋼の盾+4", 1, 0, {0, -1}, {210, 0}, 2800}, {34, "鋼の盾+5", 1, 0, {0, -1}, {225, 0}, 3000}, {35, "鋼の盾+6", 1, 0, {0, -1}, {240, 0}, 3200}, {36, "鋼の盾+7", 1, 0, {0, -1}, {255, 0}, 3400}, {37, "鋼の盾+8", 1, 0, {0, -1}, {270, 0}, 3600}, {38, "鋼の盾+9", 1, 0, {0, -1}, {285, 0}, 3800}, {39, "鋼の盾+10", 1, 0, {0, -1}, {300, 0}, 4000}, {40, "名士の盾", 1, 0, {0, 0}, {600, 0}, 6000, 8}, {41, "名士の盾+1", 1, 0, {0, -1}, {660, 0}, 6600}, {42, "名士の盾+2", 1, 0, {0, -1}, {720, 0}, 7200}, {43, "名士の盾+3", 1, 0, {0, -1}, {780, 0}, 7800}, {44, "名士の盾+4", 1, 0, {0, -1}, {840, 0}, 8400}, {45, "名士の盾+5", 1, 0, {0, -1}, {900, 0}, 9000}, {46, "名士の盾+6", 1, 0, {0, -1}, {960, 0}, 9600}, {47, "名士の盾+7", 1, 0, {0, -1}, {1020, 0}, 10200}, {48, "名士の盾+8", 1, 0, {0, -1}, {1080, 0}, 10800}, {49, "名士の盾+9", 1, 0, {0, -1}, {1140, 0}, 11400}, {50, "名士の盾+10", 1, 0, {0, -1}, {1200, 0}, 12000}, {51, "革の服", 2, 0, {0, 0}, {13, 110}, 30, 20}, {52, "鉄の帷子", 2, 0, {0, 0}, {35, 320}, 150, 15}, {53, "青銅の鎧・火", 2, 1, {0, 0}, {90, 830}, 600, 12}, {54, "青銅の鎧・水", 2, 2, {0, 0}, {90, 830}, 600, 12}, {55, "青銅の鎧・地", 2, 3, {0, 0}, {90, 830}, 600, 12}, {56, "青銅の鎧・緑", 2, 4, {0, 0}, {90, 830}, 600, 12}, {57, "鋼鉄の鎧・火", 2, 1, {0, 0}, {200, 1800}, 4000, 10}, {58, "鋼鉄の鎧・火+1", 2, 1, {0, -1}, {220, 1980}, 4400}, {59, "鋼鉄の鎧・火+2", 2, 1, {0, -1}, {240, 2160}, 4800}, {60, "鋼鉄の鎧・火+3", 2, 1, {0, -1}, {260, 2340}, 5200}, {61, "鋼鉄の鎧・火+4", 2, 1, {0, -1}, {280, 2520}, 5600}, {62, "鋼鉄の鎧・火+5", 2, 1, {0, -1}, {300, 2700}, 6000}, {63, "鋼鉄の鎧・火+6", 2, 1, {0, -1}, {320, 2880}, 6400}, {64, "鋼鉄の鎧・火+7", 2, 1, {0, -1}, {340, 3060}, 6800}, {65, "鋼鉄の鎧・火+8", 2, 1, {0, -1}, {360, 3240}, 7200}, {66, "鋼鉄の鎧・火+9", 2, 1, {0, -1}, {380, 3420}, 7600}, {67, "鋼鉄の鎧・火+10", 2, 1, {0, -1}, {400, 3600}, 8000}, {68, "鋼鉄の鎧・水", 2, 2, {0, 0}, {200, 1800}, 4000, 10}, {69, "鋼鉄の鎧・水+1", 2, 2, {0, -1}, {220, 1980}, 4400}, {70, "鋼鉄の鎧・水+2", 2, 2, {0, -1}, {240, 2160}, 4800}, {71, "鋼鉄の鎧・水+3", 2, 2, {0, -1}, {260, 2340}, 5200}, {72, "鋼鉄の鎧・水+4", 2, 2, {0, -1}, {280, 2520}, 5600}, {73, "鋼鉄の鎧・水+5", 2, 2, {0, -1}, {300, 2700}, 6000}, {74, "鋼鉄の鎧・水+6", 2, 2, {0, -1}, {320, 2880}, 6400}, {75, "鋼鉄の鎧・水+7", 2, 2, {0, -1}, {340, 3060}, 6800}, {76, "鋼鉄の鎧・水+8", 2, 2, {0, -1}, {360, 3240}, 7200}, {77, "鋼鉄の鎧・水+9", 2, 2, {0, -1}, {380, 3420}, 7600}, {78, "鋼鉄の鎧・水+10", 2, 2, {0, -1}, {400, 3600}, 8000}, {79, "鋼鉄の鎧・地", 2, 3, {0, 0}, {200, 1800}, 4000, 10}, {80, "鋼鉄の鎧・地+1", 2, 3, {0, -1}, {220, 1980}, 4400}, {81, "鋼鉄の鎧・地+2", 2, 3, {0, -1}, {240, 2160}, 4800}, {82, "鋼鉄の鎧・地+3", 2, 3, {0, -1}, {260, 2340}, 5200}, {83, "鋼鉄の鎧・地+4", 2, 3, {0, -1}, {280, 2520}, 5600}, {84, "鋼鉄の鎧・地+5", 2, 3, {0, -1}, {300, 2700}, 6000}, {85, "鋼鉄の鎧・地+6", 2, 3, {0, -1}, {320, 2880}, 6400}, {86, "鋼鉄の鎧・地+7", 2, 3, {0, -1}, {340, 3060}, 6800}, {87, "鋼鉄の鎧・地+8", 2, 3, {0, -1}, {360, 3240}, 7200}, {88, "鋼鉄の鎧・地+9", 2, 3, {0, -1}, {380, 3420}, 7600}, {89, "鋼鉄の鎧・地+10", 2, 3, {0, -1}, {400, 3600}, 8000}, {90, "鋼鉄の鎧・緑", 2, 4, {0, 0}, {200, 1800}, 700, 4000}, {91, "鋼鉄の鎧・緑+1", 2, 4, {0, -1}, {220, 1980}, 4400}, {92, "鋼鉄の鎧・緑+2", 2, 4, {0, -1}, {240, 2160}, 4800}, {93, "鋼鉄の鎧・緑+3", 2, 4, {0, -1}, {260, 2340}, 5200}, {94, "鋼鉄の鎧・緑+4", 2, 4, {0, -1}, {280, 2520}, 5600}, {95, "鋼鉄の鎧・緑+5", 2, 4, {0, -1}, {300, 2700}, 6000}, {96, "鋼鉄の鎧・緑+6", 2, 4, {0, -1}, {320, 2880}, 6400}, {97, "鋼鉄の鎧・緑+7", 2, 4, {0, -1}, {340, 3060}, 6800}, {98, "鋼鉄の鎧・緑+8", 2, 4, {0, -1}, {360, 3240}, 7200}, {99, "鋼鉄の鎧・緑+9", 2, 4, {0, -1}, {380, 3420}, 7600}, {100, "鋼鉄の鎧・緑+10", 2, 4, {0, -1}, {400, 3600}, 8000}, {101, "騎士の鎧・火", 2, 1, {0, 0}, {1000, 9500}, 7000, 7}, {102, "騎士の鎧・火+1", 2, 1, {0, -1}, {1100, 10450}, 7700}, {103, "騎士の鎧・火+2", 2, 1, {0, -1}, {1200, 11400}, 8400}, {104, "騎士の鎧・火+3", 2, 1, {0, -1}, {1300, 12350}, 9100}, {105, "騎士の鎧・火+4", 2, 1, {0, -1}, {1400, 13300}, 9800}, {106, "騎士の鎧・火+5", 2, 1, {0, -1}, {1500, 14250}, 10500}, {107, "騎士の鎧・火+6", 2, 1, {0, -1}, {1600, 15200}, 11200}, {108, "騎士の鎧・火+7", 2, 1, {0, -1}, {1700, 16150}, 11900}, {109, "騎士の鎧・火+8", 2, 1, {0, -1}, {1800, 17100}, 12600}, {110, "騎士の鎧・火+9", 2, 1, {0, -1}, {1900, 18050}, 1300}, {111, "騎士の鎧・火+10", 2, 1, {0, -1}, {2000, 19000}, 14000}, {112, "騎士の鎧・水", 2, 2, {0, 0}, {1000, 9500}, 7000, 7}, {113, "騎士の鎧・水+1", 2, 2, {0, -1}, {1100, 10450}, 7700}, {114, "騎士の鎧・水+2", 2, 2, {0, -1}, {1200, 11400}, 8400}, {115, "騎士の鎧・水+3", 2, 2, {0, -1}, {1300, 12350}, 9100}, {116, "騎士の鎧・水+4", 2, 2, {0, -1}, {1400, 13300}, 9800}, {117, "騎士の鎧・水+5", 2, 2, {0, -1}, {1500, 14250}, 10500}, {118, "騎士の鎧・水+6", 2, 2, {0, -1}, {1600, 15200}, 11200}, {119, "騎士の鎧・水+7", 2, 2, {0, -1}, {1700, 16150}, 11900}, {120, "騎士の鎧・水+8", 2, 2, {0, -1}, {1800, 17100}, 12600}, {121, "騎士の鎧・水+9", 2, 2, {0, -1}, {1900, 18050}, 13300}, {122, "騎士の鎧・水+10", 2, 2, {0, -1}, {2000, 19000}, 14000}, {123, "騎士の鎧・地", 2, 3, {0, 0}, {1000, 9500}, 7000, 7}, {124, "騎士の鎧・地+1", 2, 3, {0, -1}, {1100, 10450}, 7700}, {125, "騎士の鎧・地+2", 2, 3, {0, -1}, {1200, 11400}, 8400}, {126, "騎士の鎧・地+3", 2, 3, {0, -1}, {1300, 12350}, 9100}, {127, "騎士の鎧・地+4", 2, 3, {0, -1}, {1400, 13300}, 9800}, {128, "騎士の鎧・地+5", 2, 3, {0, -1}, {1500, 14250}, 10500}, {129, "騎士の鎧・地+6", 2, 3, {0, -1}, {1600, 15200}, 11200}, {130, "騎士の鎧・地+7", 2, 3, {0, -1}, {1700, 16150}, 11900}, {131, "騎士の鎧・地+8", 2, 3, {0, -1}, {1800, 17100}, 12600}, {132, "騎士の鎧・地+9", 2, 3, {0, -1}, {1900, 18050}, 13300}, {133, "騎士の鎧・地+10", 2, 3, {0, -1}, {2000, 19000}, 14000}, {134, "騎士の鎧・緑", 2, 4, {0, 0}, {1000, 9500}, 7000, 7}, {135, "騎士の鎧・緑+1", 2, 4, {0, -1}, {1100, 10450}, 7700}, {136, "騎士の鎧・緑+2", 2, 4, {0, -1}, {1200, 11400}, 8400}, {137, "騎士の鎧・緑+3", 2, 4, {0, -1}, {1300, 12350}, 9100}, {138, "騎士の鎧・緑+4", 2, 4, {0, -1}, {1400, 13300}, 9800}, {139, "騎士の鎧・緑+5", 2, 4, {0, -1}, {1500, 14250}, 10500}, {140, "騎士の鎧・緑+6", 2, 4, {0, -1}, {1600, 15200}, 11200}, {141, "騎士の鎧・緑+7", 2, 4, {0, -1}, {1700, 16150}, 11900}, {142, "騎士の鎧・緑+8", 2, 4, {0, -1}, {1800, 17100}, 12600}, {143, "騎士の鎧・緑+9", 2, 4, {0, -1}, {1900, 18050}, 13300}, {144, "騎士の鎧・地+10", 2, 4, {0, -1}, {2000, 19000}, 14000}, {145, "手ぶれ補正器", 3, 0, {0, 0}, {10, 0}, 200}, {146, "急所視覚化グラス", 3, 0, {0, 0}, {30, 0}, 800}, {147, "身代わり人形", 3, 0, {2, 1}, {100, 0}, 2500}, {148, "自動回避の靴", 3, 0, {0, 0}, {10, 0}, 250}, {149, "鮮烈なペンダント", 3, 0, {0, 0}, {30, 0}, 920}, {150, "猛き力のリング", 3, 0, {1, 1}, {70, 0}, 3000}, {151, "不思議なクッションの羽織", 3, 0, {1, 1}, {50, 0}, 3000}, {152, "マナスパイク", 3, 0, {1, 1}, {50, 0}, 4500}, {153, "薬草", 4, 0, {0, 0}, {20, 35}, 3, 30}, {154, "世色癌半錠", 4, 0, {0, 0}, {30, 0}, 7}, {155, "良質の薬草", 4, 0, {0, 0}, {40, 65}, 12, 27}, {156, "世色癌", 4, 0, {0, 0}, {60, 0}, 15}, {157, "ヒーリングフラワー", 4, 0, {0, 0}, {120, 160}, 70, 23}, {158, "世色癌2", 4, 0, {0, 0}, {150, 0}, 100}, {159, "メディカルビーツ", 4, 0, {0, 0}, {300, 500}, 320, 19}, {160, "世色癌3", 4, 0, {0, 0}, {400, 0}, 350}, {161, "クォーターポーション", 4, 0, {0, 0}, {25, 0}, 2500}, {162, "雑多な漢方", 4, 0, {0, 0}, {30, 50}, 20, 25}, {163, "漢方", 4, 0, {0, 0}, {70, 90}, 70, 23}, {164, "マナポーション", 4, 0, {0, 0}, {150, 200}, 300, 20}, {165, "高品質なマナポーション", 4, 0, {0, 0}, {300, 500}, 750, 16}, {166, "サードマナポーション", 4, 0, {0, 0}, {3, 0}, 2500}, {167, "再生の妙薬", 4, 0, {0, 0}, {100, 0}, 4000, 100}, {168, "万寝丸", 4, 0, {0, 0}, {100, 0}, 4200, 100}, {169, "賢者の水", 4, 0, {0, 0}, {100, 0}, 10000, 100}, {170, "コーヒー", 5, 0, {0, 6}, {0, 20}, 50, 20}, {171, "マジックドリンク", 5, 0, {0, 3}, {0, 50}, 100, 10}, {172, "疾氷", 5, 0, {0, 0}, {1, 0}, 30, 15}, {173, "毒抜き", 5, 0, {0, 0}, {2, 0}, 30, 15}, {174, "闇祓い", 5, 0, {0, 0}, {3, 0}, 30, 15}, {175, "霞布団", 5, 0, {0, 6}, {4, 25}, 100, 20}, {176, "アシッドシールド", 5, 0, {0, 3}, {4, 50}, 300, 10}, {177, "万能薬", 5, 0, {0, 0}, {5, 0}, 1000, 100}, {178, "ヒナミレモン", 6, 0, {3, 0}, {0, 0}, 300}, {179, "魔血魂", 6, 0, {0, 0}, {0, 0}, 0, 100}, {180, "魔晶片", 6, 0, {0, 3}, {0, 0}, 0, 30}, {181, "魔晶石", 6, 0, {4, 7}, {0, 0}, 0, 15}, {182, "魔晶塊", 6, 0, {7, 10}, {0, 0}, 0, 7}, {183, "帰り木", 6, 0, {0, 0}, {0, 0}, 50}, {184, "魔王の血", 7, 0, {1, 3}, {5, 0}, 0, 100}, {185, "魔剣カオス", 7, 0, {0, 0}, {1000, 0}, 0}, {186, "乱剣エリス", 7, 0, {0, 0}, {1000, 0}, 0}};
struct subatt m_att[6] = {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
struct subatt e_att[6] = {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};
int equip[5] = {0, 0, 0, 0, 0};
int location[3] = {1, 1, 0};
void f_gets(char *out_ch)
{
	fflush(stdin);
	fgets(out_ch, sizeof(out_ch), stdin);
	int last = strlen(out_ch) - 1;
	if (last >= 0 && out_ch[last] == '\n')
	{
		out_ch[last] = '\0';
	}
}
int hash_comp(unsigned char *hash_a, unsigned char *hash_b, int a_size, int b_size)
{
	int comp = 1;
	if (b_size == a_size)
	{
		int i = 0;
		while ((i < b_size) && (hash_b[i] == hash_a[i]))
		{
			i += 1;
		}
		if (i == b_size)
		{
			comp = 0;
		}
	}
	return comp;
	/*int comp = 0;
	for (int count = 0; count < 32; count++)
	{
		if (hash_a[count] != hash_b[count])
			comp = 1;
	}
	return comp;*/
} // hash_comp(ucHash, save_d[_data-1].has_d,sizeof(ucHash)/sizeof(unsigned char),sizeof(save_d[_data-1].has_d)/sizeof(unsigned char));
int main(void)
{
	/*変数群、配列の初期化*/
	while (1)
	{
		printf("1:最初から 2:続きから\n");
		/*(入力)*/
		if (*sele_cut != '\0')
			printf("入力エラー");
		else if (first_select == 1)
			break;
		else if (first_select == 2)
		{
			struct stat st;
			if (stat("savefiles", &st) == 0)
			{
				int file_num = 1;
				int data_exi[100] = {0};
				int exist = 0;
				for (file_num = 1; file_num < 101; file_num++)
				{
					memset(save_d[file_num - 1].name, '\0', sizeof(save_d[file_num - 1].name));
					memset(save_d[file_num - 1].yourname, '\0', sizeof(save_d[file_num - 1].yourname));
					FILE *fp = NULL;
					OPEN_R(file_num, fp); // fopen_s(&fp, SAV_DAT(i), "rb");
					if (fp == NULL)
					{
						data_exi[file_num - 1] = 0;
					}
					else
					{
						fread(save_d + file_num - 1, sizeof(save_d[file_num - 1]), sizeof(save_d[file_num - 1]) / sizeof(A_STATUS), fp);
						data_exi[file_num - 1] = 1;
						exist += 1;
					}
					if (fp)
						fclose(fp);
				}
				int data_dec = 1;
				int load_data = 0;
				char sele_data[100];
                /*ここまででバイナリファイルの読み込み*/
				while (exist > 0 && strcmp(ans0, "y") != 0)
				{
                    /*ロードするデータの選択*/
					printf("\n");
					char *load_cut;
					load_data = (int)strtol(sele_data, &load_cut, 10);
					if (*load_cut == '\0' && load_data >= 1 && load_data <= 100)
					{
						if (data_exi[load_data - 1] == 0)
						{
							printf("%d:ーーーーー\nセーブデータが存在しない！\nHit any key.", load_data);
							getch();
						}
						if (data_exi[load_data - 1] == 1)
						{
							printf("%d:%s  レベル%d  HP %d/%d  MP %d/%d\n", load_data, save_d[load_data - 1].name, save_d[load_data - 1].lv, save_d[load_data - 1].curhp, save_d[load_data - 1].maxhp, save_d[load_data - 1].curmp, save_d[load_data - 1].maxmp);
							while (1)
							{
								printf("%d番をロードしますか？\tyesならy、noならnを押してください。\n", load_data);
								fflush(stdin);
								fgets(ans0, sizeof(ans0), stdin);
								int last2 = strlen(ans0) - 1;
								if (last2 >= 0 && ans0[last2] == '\n')
								{
									ans0[last2] = '\0';
								}
								if (strcmp(ans0, "y") == 0 || strcmp(ans0, "n") == 0)
								{
									memset(ucHash, '\0', sizeof(ucHash));
									char buf[10000];
									SHA256_Init(&ctx256);
									snprintf(buf, sizeof(buf), "%d", save_d[load_data - 1].lv_limit);
									SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
									CHA_SHA_UP(save_d[load_data - 1].name);
									INT_SHA_UP(save_d[load_data - 1].curhp);
									DOU_SHA_UP(save_d[load_data - 1].tru_no_exp);/*等と変数の型に合わせてプリプロセッサを使う*/
									SHA256_Final(ucHash, &ctx256);
									if (hash_comp(ucHash, save_d[load_data - 1].has_d, sizeof(ucHash) / sizeof(unsigned char), sizeof(save_d[load_data - 1].has_d) / sizeof(unsigned char)) == 0)/*会っていた場合*/
									{
										printf("ロード完了\n");
										getch();
									}
									else/*違う場合*/
									{
										printf("ファイルが破損している！\nHit any key.\n");
										getch();
										exit(1);
									}
									break;
								}
								else
								{
									printf("入力エラー\n");
									continue;
								}
							}
						}
					}
				}
				break;
			}
			else
			{
				printf("セーブデータが存在しない\nHit any key.");
				getch();
			}
		}
		else
		{
			printf("選択肢に存在しません。もう一度選択して下さい。\n");
			getch();
		}
		system("cls");
	}
	free(select);
	if (first_select == 1)
	{
		/*適当に変数に数値を代入*/
	}
	/*セーブとロードに使わない変数の初期化*/
	if (first_select == 1)
	{
        /*適当に変数に数値を代入その２*/
	}
	while (player.curhp != 0 && strcmp(cmd, "e"))
	{
		load_or_not = 0;
		if (in_dungeon == 0)
		{
			int response0;
			char *inp_place;
			inp_place = (char *)malloc(sizeof(char) * 10);
			while (select_place == -1)/*移動行動*/
			{
				system("cls");
				if (lv_shop < 1)
					printf("どこに行きますか？\n0:メニューを表示 1:ダンジョンへ \n");
				char *inp_cut;
				fflush(stdin);
				scanf("%s", inp_place);
				select_place = (int)strtol(inp_place, &inp_cut, 10);
				if (*inp_cut != '\0')
				{
					printf("入力エラー\n");
				}
				else if (select_place >= 2)
				{
					printf("該当する地点が見当たりません！\n");
					printf("Hit any key.");
					response0 = getch();
				}
				else
					break;
			}
			free(inp_place);
			if (select_place == 0)
			{
				while (1)
				{
					printf("\n\n");
					printf("メニュー\nf:セーブ＆ロード\n");
					fflush(stdin);
					fgets(cmd, sizeof(cmd), stdin);
					int cm_cut = strlen(cmd) - 1;
					if (cm_cut >= 0 && cmd[cm_cut] == '\n')
					{ /*改行を消去*/
						cmd[cm_cut] = '\0';
					}
					if (strcmp(cmd, "f") == 0)
					{
						while (1)
						{
							int file_num = 1;
							int data_exi[100] = {0};
							int exist = 0;
							int err_num;
							for (file_num = 1; file_num < 101; file_num++)
							{
								memset(save_d[file_num - 1].name, '\0', sizeof(save_d[file_num - 1].name));
								memset(save_d[file_num - 1].yourname, '\0', sizeof(save_d[file_num - 1].yourname));
								FILE *fp = NULL;
								OPEN_R(file_num, fp); // fopen_s(&fp, SAV_DAT(i), "rb");
								if (fp == NULL)
								{
									data_exi[file_num - 1] = 0;
								}
								else
								{
									fread(save_d + file_num - 1, sizeof(save_d[file_num - 1]), sizeof(save_d[file_num - 1]) / sizeof(A_STATUS), fp);
									data_exi[file_num - 1] = 1;
									exist += 1;
								}
								if (fp)
									fclose(fp);
							}
                            /*ここまででバイナリファイルの読み込み*/
							printf("セーブするならsキー、ロードするならlキー、やめるならeキーを押して下さい。\n");
							char com[3] = "a";
							f_gets(com);
							if (strcmp(com, "s") == 0)/*書き込み*/
							{
								int data_dec = 1;
								int save_data = 0;
								char sele_data[100];
								char ans2[5] = "k";
								while (strcmp(ans2, "y") != 0)
								{
									printf("\nどこにデータをセーブしますか？\na:1-10 b:11-20 c:21-30 d:31-40 e:41-50 f:51-60 g:61-70 h:71-80 i:81-90 j:91-100 1以上の数字:データ選択 0:戻る\n");
									fflush(stdin);
									/*書き込むデータの選択*/
									char *save_cut;
									save_data = (int)strtol(sele_data, &save_cut, 10);
									if (*save_cut == '\0' && save_data >= 1 && save_data <= 100)
									{
										if (data_exi[save_data - 1] == 1 || data_exi[save_data - 1] == 0)/*該当のバイナリファイルがない場合*/
										{
											while (1)
											{
												if (data_exi[save_data - 1] == 0)
													printf("%d番に新しくセーブしますか？\tyesならy、noならnを押してください。\n", save_data);
												if (data_exi[save_data - 1] == 1)
													printf("%d番にデータを上書きしますか？\tyesならy、noならnを押してください。\n", save_data);
												fflush(stdin);
												fgets(ans2, sizeof(ans2), stdin);
												int last2 = strlen(ans2) - 1;
												if (last2 >= 0 && ans2[last2] == '\n')
												{
													ans2[last2] = '\0';
												}
												if (strcmp(ans2, "y") == 0 || strcmp(ans2, "n") == 0)
												{
													if (strcmp(ans2, "y") == 0)
													{
														if (data_exi[save_data - 1] == 0)
														{
															FILE *fp2 = NULL;
															OPEN_W(save_data, fp2); // fopen_s(&fp, SAV_DAT(i), "wb");
															if (fp2 == NULL)
															{
																printf("eroor");
															}
															else
															{
                                                                /*現在の変数の値を保存させる構造体にコピー*/
																memset(save_d[save_data - 1].has_d, '\0', sizeof(save_d[save_data - 1].has_d));
																char buf[10000];
																SHA256_Init(&ctx256);
																snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
																SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																CHA_SHA_UP(save_d[save_data - 1].name);
																INT_SHA_UP(save_d[save_data - 1].curhp);
																DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
																SHA256_Final(save_d[save_data - 1].has_d, &ctx256);/*ハッシュ値も合わせて保存*/
																fwrite(save_d + save_data - 1, sizeof(save_d[save_data - 1]), sizeof(save_d[save_data - 1]) / sizeof(A_STATUS), fp2);
																printf("セーブ完了\n");
																getch();
															}
															fclose(fp2);
														}
														else
														{
															memset(ucHash, '\0', sizeof(ucHash));
															char buf[10000];
															SHA256_Init(&ctx256);
															snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
															SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
															CHA_SHA_UP(save_d[save_data - 1].name);
															INT_SHA_UP(save_d[save_data - 1].curhp);
															DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
															SHA256_Final(ucHash, &ctx256);
															if (hash_comp(ucHash, save_d[save_data - 1].has_d, sizeof(ucHash) / sizeof(unsigned char), sizeof(save_d[save_data - 1].has_d) / sizeof(unsigned char)) == 0)/*データが保存した時と変わらない時*/
															{
																FILE *fp2 = NULL;
																OPEN_W(save_data, fp2); // fopen_s(&fp, SAV_DAT(i), "wb");
																if (fp2 == NULL)
																{
																	printf("eroor");
																}
																else
																{
                                                                    /*バイナリファイルに保存する値を構造体にコピー*/
																	memset(save_d[save_data - 1].has_d, '\0', sizeof(save_d[save_data - 1].has_d));
																	memset(buf, '\0', sizeof(buf));
																	SHA256_Init(&ctx256);
																	snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
																	SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																	CHA_SHA_UP(save_d[save_data - 1].name);
																	INT_SHA_UP(save_d[save_data - 1].curhp);
																	DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
																	SHA256_Final(save_d[save_data - 1].has_d, &ctx256);
																	fwrite(save_d + save_data - 1, sizeof(save_d[save_data - 1]), sizeof(save_d[save_data - 1]) / sizeof(A_STATUS), fp2);
																	printf("セーブ完了\n");
																	getch();
																}
																fclose(fp2);
															}
															else
															{
																printf("ファイルが破損している！\nHit any key.\n");
																getch();
																exit(1);
															}
														}
													}
													break;
												}
												else
												{
													printf("入力エラー\n");
													continue;
												}
											}
										}
									}
								}
								if (save_data != 0 && strcmp(ans2, "y") == 0)
									break;
							}
							else if (strcmp(com, "l") == 0)
							{
								int data_dec = 1;
								int load_data = 0;
								char sele_data[100];
								char ans2[5] = "k";
								struct stat st;
								if (stat("savefiles", &st) == 0)
								{
									while (exist > 0 && strcmp(ans2, "y") != 0)
									{
                                        /*どのバイナリファイルを読み込むかの選択*/
										char *load_cut;
										load_data = (int)strtol(sele_data, &load_cut, 10);
										if (*load_cut == '\0' && load_data >= 1 && load_data <= 100)
										{
											printf("\n");
											if (data_exi[load_data - 1] == 0)
											{
												printf("%d:ーーーーー\nセーブデータが存在しない！\nHit any key.", load_data);
												getch();
											}
											if (data_exi[load_data - 1] == 1)
											{
												printf("%d:%s  レベル%d  HP %d/%d  MP %d/%d\n", load_data, save_d[load_data - 1].name, save_d[load_data - 1].lv, save_d[load_data - 1].curhp, save_d[load_data - 1].maxhp, save_d[load_data - 1].curmp, save_d[load_data - 1].maxmp);
												while (1)
												{
													printf("%d番をロードしますか？\tyesならy、noならnを押してください。\n", load_data);
													fflush(stdin);
													fgets(ans2, sizeof(ans2), stdin);
													int last2 = strlen(ans2) - 1;
													if (last2 >= 0 && ans2[last2] == '\n')
													{
														ans2[last2] = '\0';
													}
													if (strcmp(ans2, "y") == 0 || strcmp(ans2, "n") == 0)
													{
														if (strcmp(ans2, "y") == 0)
														{
															memset(ucHash, '\0', sizeof(ucHash));
															char buf[10000];
															SHA256_Init(&ctx256);
															snprintf(buf, sizeof(buf), "%d", save_d[load_data - 1].lv_limit);
															SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
															CHA_SHA_UP(save_d[load_data - 1].name);
															INT_SHA_UP(save_d[load_data - 1].curhp);
															DOU_SHA_UP(save_d[load_data - 1].tru_no_exp);
															SHA256_Final(ucHash, &ctx256);
															if (hash_comp(ucHash, save_d[load_data - 1].has_d, sizeof(ucHash) / sizeof(unsigned char), sizeof(save_d[load_data - 1].has_d) / sizeof(unsigned char)) == 0)//セーブデータのハッシュ値とセーブデータを処理したハッシュ値が同一
															{
                                                                /*セーブデータの値をコピー*/
																printf("ロード完了\n");
																getch();
																load_or_not = 1;
															}
															else
															{
																printf("ファイルが破損している！\nHit any key.\n");
																getch();
																exit(1);
															}
														}
														break;
													}
													else
													{
														printf("入力エラー\n");
														continue;
													}
												}
											}
										}
									}
									if (exist == 0)
									{
										printf("セーブデータが存在しない\nHit any key.");
										getch();
									}
									if (load_data != 0 && strcmp(ans2, "y") == 0)
										break;
								}
								else
								{
									printf("セーブデータが存在しない\nHit any key.");
									getch();
								}
							}
							else if (strcmp(com, "e") == 0)
								break;
							system("cls");
						}
						if (load_or_not == 1)
							break;
					}
					else if (strcmp(cmd, "e") == 0)
					{
						printf("終了しますか?\nするならyを,続けるならnを押してください\n");
						fflush(stdin);
						fgets(enans, sizeof(stdin), stdin);
						int endcut = strlen(enans) - 1;
						if (endcut >= 0 && enans[endcut] == '\n')
						{
							enans[endcut] = '\0';
						}
						if (strcmp(enans, "y") == 0)
						{
							cmd[0] = 'e';
							cmd[1] = '\0';
							break;
						}
						else
						{
							printf("continue\n");
						}
					}
					else if (strcmp(cmd, "x") == 0)
					{
						select_place = -1;
						break;
					}
				}
			}
			if (select_place == 1)
			{
				printf("%sはダンジョンの中に入っていった…\n", player.name);
				location[0] = 1;
				location[1] = 1;
				location[2] = 0;
				Sleep(1000);
				in_dungeon = 1;
				print = 1;
				continue;
			}
		}
		else if (in_dungeon == 1)
		{
			if (kbhit() && player.curhp > 0 || hit_key == 0x70)
			{
				cmd[0] = 'a';
				if (hit_key != 0x70)
					hit_key = getch();
				else if (hit_key == 0x70)
					hit_key = 0x78;
				switch (hit_key)
				{
				default:
					while (hit_key == 0x78 || hit_key == 0x1b)
					{
						if (in_dungeon != 1)
							break;
						fgets(cmd, sizeof(cmd), stdin);
						int cm_cut = strlen(cmd) - 1;
						if (cm_cut >= 0 && cmd[cm_cut] == '\n')
						{ /*改行を消去*/
							cmd[cm_cut] = '\0';
						}
						if (strcmp(cmd, "f") == 0)
						{
							while (1)
							{
								int file_num = 1;
								int data_exi[100] = {0};
								int exist = 0;
								for (file_num = 1; file_num < 101; file_num++)
								{
									memset(save_d[file_num - 1].name, '\0', sizeof(save_d[file_num - 1].name));
									memset(save_d[file_num - 1].yourname, '\0', sizeof(save_d[file_num - 1].yourname));
									FILE *fp = NULL;
									OPEN_R(file_num, fp); // fopen_s(&fp, SAV_DAT(i), "rb");
									if (fp == NULL)
									{
										data_exi[file_num - 1] = 0;
									}
									else
									{
										fread(save_d + file_num - 1, sizeof(save_d[file_num - 1]), sizeof(save_d[file_num - 1]) / sizeof(A_STATUS), fp);
										data_exi[file_num - 1] = 1;
										exist += 1;
									}
									if (fp)
										fclose(fp);
								}
                                /*バイナリファイルの読み込み*/
								printf("セーブするならsキー、ロードするならlキー、やめるならeキーを押して下さい。\n");
								char com[3] = "a";
								f_gets(com);
								if (strcmp(com, "s") == 0)
								{
									int data_dec = 1;
									int save_data = 0;
									char sele_data[100];
									char ans2[5] = "k";
									while (strcmp(ans2, "y") != 0)
									{
										system("cls");
										for (file_num = data_dec * 10 - 9; file_num < data_dec * 10 + 1; file_num++)
										{
											if (data_exi[file_num - 1] == 0)
												printf("%d:ーーーーー ", file_num);
											if (data_exi[file_num - 1] == 1)
												printf("%d:%s  レベル%d  HP %d/%d  MP %d/%d ", file_num, save_d[file_num - 1].name, save_d[file_num - 1].lv, save_d[file_num - 1].curhp, save_d[file_num - 1].maxhp, save_d[file_num - 1].curmp, save_d[file_num - 1].maxmp);
											if (file_num % 2 == 0)
												printf("\n");
										}
										printf("\nどこにデータをセーブしますか？\na:1-10 b:11-20 c:21-30 d:31-40 e:41-50 f:51-60 g:61-70 h:71-80 i:81-90 j:91-100 1以上の数字:データ選択 0:戻る\n");
										fflush(stdin);
										/*書き込むファイルの選択*/
										char *save_cut;
										save_data = (int)strtol(sele_data, &save_cut, 10);
										if (*save_cut == '\0' && save_data >= 1 && save_data <= 100)
										{
											if (data_exi[save_data - 1] == 1 || data_exi[save_data - 1] == 0)
											{
												printf("\n");
												if (data_exi[save_data - 1] == 0)
													printf("%d:ーーーーー\n", save_data);
												if (data_exi[save_data - 1] == 1)
													printf("%d:%s  レベル%d  HP %d/%d  MP %d/%d\n", save_data, save_d[save_data - 1].name, save_d[save_data - 1].lv, save_d[save_data - 1].curhp, save_d[save_data - 1].maxhp, save_d[save_data - 1].curmp, save_d[save_data - 1].maxmp);
												while (1)
												{
													if (data_exi[save_data - 1] == 0)
														printf("%d番に新しくセーブしますか？\tyesならy、noならnを押してください。\n", save_data);
													if (data_exi[save_data - 1] == 1)
														printf("%d番にデータを上書きしますか？\tyesならy、noならnを押してください。\n", save_data);
													fflush(stdin);
													fgets(ans2, sizeof(ans2), stdin);
													int last2 = strlen(ans2) - 1;
													if (last2 >= 0 && ans2[last2] == '\n')
													{
														ans2[last2] = '\0';
													}
													if (strcmp(ans2, "y") == 0 || strcmp(ans2, "n") == 0)
													{
														if (strcmp(ans2, "y") == 0)
														{
															if (data_exi[save_data - 1] == 0)/*バイナリファイルが存在しない*/
															{
																FILE *fp2 = NULL;
																OPEN_W(save_data, fp2); // fopen_s(&fp, SAV_DAT(i), "wb");
																if (fp2 == NULL)
																{
																	printf("eroor");
																}
																else
																{
                                                                    /*書き込む構造体にデータをコピー*/
																	char buf[10000];
																	SHA256_Init(&ctx256);
																	snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
																	SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																	CHA_SHA_UP(save_d[save_data - 1].name);
																	INT_SHA_UP(save_d[save_data - 1].curhp);
																	DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
																	SHA256_Final(save_d[save_data - 1].has_d, &ctx256);
																	fwrite(save_d + save_data - 1, sizeof(save_d[save_data - 1]), sizeof(save_d[save_data - 1]) / sizeof(A_STATUS), fp2);
																	printf("セーブ完了\n");
																	getch();
																}
																fclose(fp2);
															}
															else
															{
																memset(ucHash, '\0', sizeof(ucHash));
																char buf[10000];
																SHA256_Init(&ctx256);
																snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
																SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																CHA_SHA_UP(save_d[save_data - 1].name);
																INT_SHA_UP(save_d[save_data - 1].curhp);
																DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
																SHA256_Final(ucHash, &ctx256);
																if (hash_comp(ucHash, save_d[save_data - 1].has_d, sizeof(ucHash) / sizeof(unsigned char), sizeof(save_d[save_data - 1].has_d) / sizeof(unsigned char)) == 0)
																{
																	FILE *fp2 = NULL;
																	OPEN_W(save_data, fp2); // fopen_s(&fp, SAV_DAT(i), "wb");
																	if (fp2 == NULL)
																	{
																		printf("eroor");
																	}
																	else
																	{
                                                                        /*値を保存する構造体にコピー*/
																		memset(buf, '\0', sizeof(buf));
																		SHA256_Init(&ctx256);
																		snprintf(buf, sizeof(buf), "%d", save_d[save_data - 1].lv_limit);
																		SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																		CHA_SHA_UP(save_d[save_data - 1].name);
																		INT_SHA_UP(save_d[save_data - 1].curhp);
																		DOU_SHA_UP(save_d[save_data - 1].tru_no_exp);
																		SHA256_Final(save_d[save_data - 1].has_d, &ctx256);
																		fwrite(save_d + save_data - 1, sizeof(save_d[save_data - 1]), sizeof(save_d[save_data - 1]) / sizeof(A_STATUS), fp2);
																		printf("セーブ完了\n");
																		getch();
																	}
																	fclose(fp2);
																}
																else
																{
																	printf("ファイルが破損している！\n");
																	getch();
																	exit(1);
																}
															}
														}
														break;
													}
													else
													{
														printf("入力エラー\n");
														continue;
													}
												}
											}
										}
										else if (*save_cut == '\0' && !(save_data >= 1 && save_data <= 100) && save_data != 0)
										{
											printf("ファイル選択の範囲外です\nHit any key.");
											getch();
										}
										else if (*save_cut == '\0' && save_data == 0)
											break;
										else if (*save_cut != '\0')
										{
											printf("入力エラー\nHit any key.");
											getch();
										}
									}
									if (save_data != 0 && strcmp(ans2, "y") == 0)
										break;
								}
								else if (strcmp(com, "l") == 0)
								{
									struct stat st;
									if (stat("savefiles", &st) == 0)
									{
										int data_dec = 1;
										int load_data = 0;
										char sele_data[100];
										char ans2[5] = "k";
										while (exist > 0 && strcmp(ans2, "y") != 0)
										{
											printf("\nどのデータをロードしますか？\na:1-10 b:11-20 c:21-30 d:31-40 e:41-50 f:51-60 g:61-70 h:71-80 i:81-90 j:91-100 1以上の数字:データ選択 0:戻る\n");
											/*読み込むバイナリファイルの選択*/
											else
											{
												char *load_cut;
												load_data = (int)strtol(sele_data, &load_cut, 10);
												if (*load_cut == '\0' && load_data >= 1 && load_data <= 100)
												{
													printf("\n");
													if (data_exi[load_data - 1] == 0)
													{
														printf("%d:ーーーーー\nセーブデータが存在しない！\nHit any key.", load_data);
														getch();
													}
													if (data_exi[load_data - 1] == 1)
													{
														printf("%d:%s  レベル%d  HP %d/%d  MP %d/%d\n", load_data, save_d[load_data - 1].name, save_d[load_data - 1].lv, save_d[load_data - 1].curhp, save_d[load_data - 1].maxhp, save_d[load_data - 1].curmp, save_d[load_data - 1].maxmp);
														while (1)
														{
															printf("%d番をロードしますか？\tyesならy、noならnを押してください。\n", load_data);
															fflush(stdin);
															fgets(ans2, sizeof(ans2), stdin);
															int last2 = strlen(ans2) - 1;
															if (last2 >= 0 && ans2[last2] == '\n')
															{
																ans2[last2] = '\0';
															}
															if (strcmp(ans2, "y") == 0 || strcmp(ans2, "n") == 0)
															{
																if (strcmp(ans2, "y") == 0)
																{
																	char buf[10000];
																	SHA256_Init(&ctx256);
																	snprintf(buf, sizeof(buf), "%d", save_d[load_data - 1].lv_limit);
																	SHA256_Update(&ctx256, (unsigned char *)buf, sizeof(buf));
																	CHA_SHA_UP(save_d[load_data - 1].name);
																	INT_SHA_UP(save_d[load_data - 1].curhp);
																	DOU_SHA_UP(save_d[load_data - 1].tru_no_exp);
																	SHA256_Final(ucHash, &ctx256);
																	if (hash_comp(ucHash, save_d[load_data - 1].has_d, sizeof(ucHash) / sizeof(unsigned char), sizeof(save_d[load_data - 1].has_d) / sizeof(unsigned char)) == 0)//バイナリファイルにあるハッシュ値とバイナリファイルの各値を読み込んで作ったハッシュ値が一致
																	{
																		/*バイナリファイルの値をコピー*/
																		printf("ロード完了\n");
																		getch();
																		load_or_not = 1;
																	}
																	else
																	{
																		printf("ファイルが破損している！\nHit any key.\n");
																		getch();
																		exit(1);
																	}
																}
																break;
															}
															else
															{
																printf("入力エラー\n");
																continue;
															}
														}
													}
												}
												else if (*load_cut == '\0' && !(load_data >= 1 && load_data <= 100) && load_data != 0)
												{
													printf("ファイル選択の範囲外です\nHit any key.");
													getch();
												}
												else if (*load_cut == '\0' && load_data == 0)
													break;
												else if (*load_cut != '\0')
												{
													printf("入力エラー\nHit any key.");
													getch();
												}
											}
										}
										if (exist == 0)
										{
											printf("セーブデータが存在しない\nHit any key.");
											getch();
										}
										if (load_data != 0 && strcmp(ans2, "y") == 0)
											break;
									}
									else
									{
										printf("セーブデータが存在しない\nHit any key.");
										getch();
									}
								}
								else if (strcmp(com, "e") == 0)
									break;
								system("cls");
							}
							if (load_or_not == 1)
								break;
						}
						else if (strcmp(cmd, "e") == 0)
						{
							printf("終了しますか?\nするならyを,続けるならnを押してください\n");
							fflush(stdin);
							fgets(enans, sizeof(stdin), stdin);
							int endcut = strlen(enans) - 1;
							if (endcut >= 0 && enans[endcut] == '\n')
							{
								enans[endcut] = '\0';
							}
							if (strcmp(enans, "y") == 0)
							{
								cmd[0] = 'e';
								cmd[1] = '\0';
								break;
							}
							else
							{
								printf("continue\n");
							}
						}
						else if (strcmp(cmd, "x") == 0)
						{
							break;
						}
					}
				}
			}
		}
	}
	free(esox);
	return EXIT_SUCCESS;
}
